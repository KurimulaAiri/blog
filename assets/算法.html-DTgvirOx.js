import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as t}from"./app-8ohG_cLi.js";const e={};function h(p,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="算法的基本概念" tabindex="-1"><a class="header-anchor" href="#算法的基本概念"><span>算法的基本概念</span></a></h1><p>程序 = 数据结构 + 算法</p><p><strong>数据结构</strong>解决如何正确地描述现实世界的问题，并存入计算机</p><p><strong>算法</strong>则关注如何高效的处理这些数据以解决实际问题（求解问题的步骤）</p><h2 id="算法的定义" tabindex="-1"><a class="header-anchor" href="#算法的定义"><span>算法的定义</span></a></h2><p>算法是对特定问题求解步骤的一种描述，他是指令的有限序列，其中的每条指令表示一个或多个操作</p><h2 id="算法的特性" tabindex="-1"><a class="header-anchor" href="#算法的特性"><span>算法的特性</span></a></h2><h3 id="有穷性" tabindex="-1"><a class="header-anchor" href="#有穷性"><span>有穷性</span></a></h3><p>一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成</p><p>算法必须有穷，程序可以是无穷的</p><h3 id="确定性" tabindex="-1"><a class="header-anchor" href="#确定性"><span>确定性</span></a></h3><p>算法中的每条指令必须具有明确的含意，对于<strong>相同的输入</strong>只能得出<strong>相同的输出</strong></p><h3 id="可行性" tabindex="-1"><a class="header-anchor" href="#可行性"><span>可行性</span></a></h3><p>算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现</p><h3 id="输入" tabindex="-1"><a class="header-anchor" href="#输入"><span>输入</span></a></h3><p>一个算法<strong>有零个或多个输入</strong>，这些输入取自于某个特定的数据对象的集合</p><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><p>一个算法<strong>有一个或多个输出</strong>，这些输出是与输入有着某种特定关系的量</p><h2 id="好-的算法需要具备的特质" tabindex="-1"><a class="header-anchor" href="#好-的算法需要具备的特质"><span>“好”的算法需要具备的特质</span></a></h2><h3 id="正确性" tabindex="-1"><a class="header-anchor" href="#正确性"><span>正确性</span></a></h3><p>能够正确地解决问题</p><h3 id="可读性" tabindex="-1"><a class="header-anchor" href="#可读性"><span>可读性</span></a></h3><p>能够有良好的可读性，以便帮助人们理解（写代码有注释）</p><h3 id="健壮性" tabindex="-1"><a class="header-anchor" href="#健壮性"><span>健壮性</span></a></h3><p>输入非法输入时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果</p><h3 id="高效率和低存储量需求" tabindex="-1"><a class="header-anchor" href="#高效率和低存储量需求"><span>高效率和低存储量需求</span></a></h3><p>花的时间少，不费内存，空间复杂度低</p><h2 id="算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#算法的时间复杂度"><span>算法的时间复杂度</span></a></h2><p>事前预估算法的时间开销 $T(n)$ 与问题规模 $n$ 的关系 ( $T$ 表示 $time$ )</p><p>比如下面这一段示例代码</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoveYou</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // n 为问题规模</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 起始数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;I Love You </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;I Love More Then </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, n);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    LoveYou</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31)]))}const d=i(e,[["render",h]]),k=JSON.parse('{"path":"/art/learning/master/major/DataStructure/%E7%AE%97%E6%B3%95.html","title":"算法","lang":"zh-CN","frontmatter":{"title":"算法","icon":"database","category":["数据结构","408","考研"],"tag":["c++","c"],"description":"算法的基本概念 程序 = 数据结构 + 算法 数据结构解决如何正确地描述现实世界的问题，并存入计算机 算法则关注如何高效的处理这些数据以解决实际问题（求解问题的步骤） 算法的定义 算法是对特定问题求解步骤的一种描述，他是指令的有限序列，其中的每条指令表示一个或多个操作 算法的特性 有穷性 一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-21T12:58:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/art/learning/master/major/DataStructure/%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"算法的基本概念 程序 = 数据结构 + 算法 数据结构解决如何正确地描述现实世界的问题，并存入计算机 算法则关注如何高效的处理这些数据以解决实际问题（求解问题的步骤） 算法的定义 算法是对特定问题求解步骤的一种描述，他是指令的有限序列，其中的每条指令表示一个或多个操作 算法的特性 有穷性 一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-21T12:58:12.000Z"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:modified_time","content":"2025-04-21T12:58:12.000Z"}]]},"git":{"createdTime":1745226475000,"updatedTime":1745240292000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":3,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":1.73,"words":520},"filePathRelative":"art/learning/master/major/DataStructure/算法.md","localizedDate":"2025年4月21日","excerpt":"\\n<p>程序 = 数据结构 + 算法</p>\\n<p><strong>数据结构</strong>解决如何正确地描述现实世界的问题，并存入计算机</p>\\n<p><strong>算法</strong>则关注如何高效的处理这些数据以解决实际问题（求解问题的步骤）</p>\\n<h2>算法的定义</h2>\\n<p>算法是对特定问题求解步骤的一种描述，他是指令的有限序列，其中的每条指令表示一个或多个操作</p>\\n<h2>算法的特性</h2>\\n<h3>有穷性</h3>\\n<p>一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成</p>\\n<p>算法必须有穷，程序可以是无穷的</p>\\n<h3>确定性</h3>","autoDesc":true}');export{d as comp,k as data};
