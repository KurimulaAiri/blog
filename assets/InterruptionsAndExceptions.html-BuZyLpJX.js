import{_ as n,c as r,b as e,o as a}from"./app-BrHMMuNw.js";const o={};function i(p,t){return a(),r("div",null,t[0]||(t[0]=[e('<h2 id="中断的作用" tabindex="-1"><a class="header-anchor" href="#中断的作用"><span>中断的作用</span></a></h2><p>“中断”会使 CPU 由用户态变为<strong>内核态</strong>，使操作系统重新夺回对 CPU 的控制权</p><p>在合适的情况下，操作系统内核会把 CPU 的使用权主动让给应用程序（第二章进程管理相关内容）</p><p>“中断”是<strong>让操作系统内核夺回 CPU 使用权的唯一途径</strong></p><p>如果没有“中断”机制，那么一旦应用程序上 CPU 运行， CPU 就会一直运行这个应用程序</p><h2 id="中断的类型" tabindex="-1"><a class="header-anchor" href="#中断的类型"><span>中断的类型</span></a></h2><p>分为两种，分别是<strong>内中断</strong>和<strong>外中断</strong></p><p>考试中这两种中断一般会有狭义上的称呼即<strong>异常</strong>和<strong>中断</strong></p><h3 id="内中断-异常" tabindex="-1"><a class="header-anchor" href="#内中断-异常"><span>内中断（异常）</span></a></h3><p>与当前执行的指令<strong>有关</strong>，中断信号来源于 CPU <strong>内部</strong></p><p>能够引发内中断的情况有：</p><ol><li><p>试图在用户态执行特权指令</p></li><li><p>程序执行过程中发生了异常（比如除以 0 ）</p></li></ol><div class="hint-container tip"><p class="hint-container-title">例子 1 ~ 2</p><p>若当前执行的指令是非法的，则会引发一个中断信号</p></div><ol start="3"><li>应用程序想请求操作系统内核的服务，此时会执行一条<strong>特殊的指令</strong>——<strong>陷入指令</strong>，该指令会引发一个内部中断信号</li></ol><div class="hint-container tip"><p class="hint-container-title">陷入指令</p><p>执行“陷入指令”，意味着应用程序主动地将 CPU 控制权还给操作系统内核。“<strong>系统调用</strong>”就是通过陷入指令完成的</p></div><h4 id="异常的分类" tabindex="-1"><a class="header-anchor" href="#异常的分类"><span>异常的分类</span></a></h4><ul><li>陷阱、陷入、访管 （ trap ）</li></ul><p>由陷入指令引发，是应用程序故意引发的</p><ul><li>故障 （ fault ）</li></ul><p>由错误条件引起的，可能被内核程序修复。内核程序修复故障后会把 CPU 使用权还给应用程序，让它继续执行下去。如:缺页故障</p><ul><li>终止 （ abort ）</li></ul><p>由致命错误引起，内核程序无法修复该错误，因此一般不再将 CPU 使用权还给引发终止的应用程序，而是直接终止该应用程序。如:整数除 0 、非法使用特权指令</p><h3 id="外中断-中断" tabindex="-1"><a class="header-anchor" href="#外中断-中断"><span>外中断（中断）</span></a></h3><p>与当前执行的指令<strong>无关</strong>，中断信号来源于 CPU <strong>外部</strong></p><p>能够引发外中断的情况有：</p><ol><li>时钟中断——由时钟部件发来的中断信号（时钟部件每隔一个时间片（如 50ms ）会给 CPU 发送一个时钟中断信号）</li></ol><div class="hint-container tip"><p class="hint-container-title">例子 1</p><p>时钟中断主要用于不同时间片处理不同的应用程序，实现操作系统并发的特性</p></div><ol start="2"><li>I/O 中断——由输入 / 输出设备发来的中断信号</li></ol><h2 id="中断机制的原理" tabindex="-1"><a class="header-anchor" href="#中断机制的原理"><span>中断机制的原理</span></a></h2><p><strong>不同的中断信号，需要用不同的中断处理程序来处理</strong>。当 CPU 检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置。</p>',30)]))}const l=n(o,[["render",i]]),c=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/InterruptionsAndExceptions.html","title":"中断和异常","lang":"zh-CN","frontmatter":{"title":"中断和异常","date":"2025-08-15T00:00:00.000Z","icon":"gears","order":5,"category":["408","操作系统","考研"],"description":"中断的作用 “中断”会使 CPU 由用户态变为内核态，使操作系统重新夺回对 CPU 的控制权 在合适的情况下，操作系统内核会把 CPU 的使用权主动让给应用程序（第二章进程管理相关内容） “中断”是让操作系统内核夺回 CPU 使用权的唯一途径 如果没有“中断”机制，那么一旦应用程序上 CPU 运行， CPU 就会一直运行这个应用程序 中断的类型 分为两...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中断和异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-15T10:25:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/InterruptionsAndExceptions.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"中断和异常"}],["meta",{"property":"og:description","content":"中断的作用 “中断”会使 CPU 由用户态变为内核态，使操作系统重新夺回对 CPU 的控制权 在合适的情况下，操作系统内核会把 CPU 的使用权主动让给应用程序（第二章进程管理相关内容） “中断”是让操作系统内核夺回 CPU 使用权的唯一途径 如果没有“中断”机制，那么一旦应用程序上 CPU 运行， CPU 就会一直运行这个应用程序 中断的类型 分为两..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-15T10:25:25.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-15T10:25:25.000Z"}]]},"git":{"createdTime":1755253525000,"updatedTime":1755253525000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":1,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":2.49,"words":747},"filePathRelative":"art/learning/master/major/OperatingSystem/InterruptionsAndExceptions.md","excerpt":"<h2>中断的作用</h2>\\n<p>“中断”会使 CPU 由用户态变为<strong>内核态</strong>，使操作系统重新夺回对 CPU 的控制权</p>\\n<p>在合适的情况下，操作系统内核会把 CPU 的使用权主动让给应用程序（第二章进程管理相关内容）</p>\\n<p>“中断”是<strong>让操作系统内核夺回 CPU 使用权的唯一途径</strong></p>\\n<p>如果没有“中断”机制，那么一旦应用程序上 CPU 运行， CPU 就会一直运行这个应用程序</p>\\n<h2>中断的类型</h2>\\n<p>分为两种，分别是<strong>内中断</strong>和<strong>外中断</strong></p>","autoDesc":true}');export{l as comp,c as data};
