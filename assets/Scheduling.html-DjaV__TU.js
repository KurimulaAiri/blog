import{_ as n,c as e,d as t,a as s,b as a,o as p}from"./app-DtrJWBgM.js";const r={};function i(m,l){return p(),e("div",null,l[0]||(l[0]=[t('<h2 id="调度的概念" tabindex="-1"><a class="header-anchor" href="#调度的概念"><span>调度的概念</span></a></h2><p>当有大量任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题</p><h2 id="调度的三个层次" tabindex="-1"><a class="header-anchor" href="#调度的三个层次"><span>调度的三个层次</span></a></h2><h3 id="高级调度" tabindex="-1"><a class="header-anchor" href="#高级调度"><span>高级调度</span></a></h3><p>内存空间有限，有时无法将用户提交的作业全部放入内存</p><p><strong id="blue-msg">高级调度（作业调度）</strong> —— 按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。<strong id="red-msg">每个作业只调入一次，调出一次</strong>。作业调入时会建立 PCB ，调出时才撤销 PCB</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>作业：一个具体的任务</p><p>用户向系统提交一个作业 = 用户让操作系统启动一个程序（来处理一个具体的任务）</p></div><h3 id="低级调度" tabindex="-1"><a class="header-anchor" href="#低级调度"><span>低级调度</span></a></h3><p><strong id="blue-msg">低级调度（进程调度 / 处理机调度）</strong> —— 按照某种策略从就绪队列中选取一个进程，将处理机分配给它</p><p>进程调度是操作系统中<strong id="blue-msg">最基本的一种调度</strong>，在一般的操作系统中都必须配置进程调度进程调度的<strong id="blue-msg">频率很高</strong>，一般几十毫秒一次</p><h3 id="中级调度" tabindex="-1"><a class="header-anchor" href="#中级调度"><span>中级调度</span></a></h3><p>内存不够时，可将某些进程的数据调出外存。等内存空闲或者进程需要运行时再重新调入内存</p><p>暂时调到外存等待的进程状态为<strong id="blue-msg">挂起状态</strong>。被挂起的进程 PCB 会被组织成<strong id="blue-msg">挂起队列</strong></p><p><strong id="blue-msg">中级调度（内存调度）</strong> —— 按照某种策略决定将哪个处于挂起状态的进程重新调入内存<br> 一个进程可能会被多次调出、调入内存，因此<strong id="blue-msg">中级调度发生的频率要比高级调度更高</strong></p><h3 id="七状态模型" tabindex="-1"><a class="header-anchor" href="#七状态模型"><span>* 七状态模型</span></a></h3><p><strong id="red-msg">考 408 仅了解，不要求记忆</strong></p><p>暂时调到外存等待的进程状态为<strong id="blue-msg">挂起状态（挂起态， suspend ）</strong><br> 挂起态又可以进一步细分为<strong id="blue-msg">就绪挂起、阻塞挂起</strong>两种状态</p><p><strong id="blue-msg">就绪挂起态（ ready-suspend ）</strong>是指在就绪队列中等待的进程被移入外存中，<strong id="blue-msg">阻塞挂起态（ block-suspend ）</strong>亦然</p><p><strong id="blue-msg">阻塞挂起态</strong>和就绪挂起态的进程可以在特定条件发生时激活并重新返回对应的队列中，某些操作系统中，处于<strong id="blue-msg">阻塞挂起态</strong>的进程在等待到对应事件发生后也可以切换成<strong id="blue-msg">就绪挂起状态</strong></p><p>同样在某些操作系统中，刚创建完成的进程或<strong id="blue-msg">运行态</strong>的进程在下处理机后会切换为<strong id="blue-msg">就绪挂起态</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意“挂起”和“阻塞”的区别，两种状态都是暂时不能获得 CPU 的服务，但挂起态是将进程映像调到外存去了，而阻塞态下进程映像还在内存中</p><p>有的操作系统会把就绪挂起、阻塞挂起分为两个挂起队列，甚至会根据阻塞原因不同再把阻塞挂起进程进一步细分为多个队列</p></div><h3 id="三种调度的联系和对比" tabindex="-1"><a class="header-anchor" href="#三种调度的联系和对比"><span>三种调度的联系和对比</span></a></h3><table><thead><tr><th style="text-align:center;">调度类型 / 对比项</th><th style="text-align:center;">要做什么</th><th style="text-align:center;">调度发生在哪</th><th style="text-align:center;">发生频率</th><th style="text-align:center;">对进程状态的影响</th></tr></thead><tbody><tr><td style="text-align:center;">高级调度（作业调度）</td><td style="text-align:center;">按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程</td><td style="text-align:center;">外存→内存（面向作业）</td><td style="text-align:center;">最低</td><td style="text-align:center;">无→创建态→就绪态</td></tr><tr><td style="text-align:center;">低级调度（内存调度）</td><td style="text-align:center;">按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</td><td style="text-align:center;">外存→内存（面向进程）</td><td style="text-align:center;">中等</td><td style="text-align:center;">挂起态→就绪态（阻塞挂起→阻塞态）</td></tr><tr><td style="text-align:center;">中级调度（进程调度）</td><td style="text-align:center;">按照某种规则，从就绪队列中选择一个进程为其分配处理机</td><td style="text-align:center;">内存→ CPU</td><td style="text-align:center;">最高</td><td style="text-align:center;">就绪态→运行态</td></tr></tbody></table><h2 id="进程调度的时机" tabindex="-1"><a class="header-anchor" href="#进程调度的时机"><span>进程调度的时机</span></a></h2><p>进程调度（低级调度）就是按照某种规则，从就绪队列中选择一个进程为其分配处理机</p><ul><li><p><strong id="red-msg">需要进行</strong>进程调度与切换的情况</p><ul><li><p>当前运行的进程<strong id="red-msg">主动放弃</strong>处理机</p><ul><li>进程正常终止</li><li>运行过程中发生异常而终止</li><li>进程主动请求阻塞（如等待 I/O ）</li></ul></li><li><p>当前运行的进程<strong id="red-msg">被动放弃</strong>处理机</p><ul><li>分给进程的时间片用完</li><li>有更紧急的事需要处理（如 I/O 中断）</li><li>有更高优先级的进程进入就绪队列</li></ul></li></ul></li><li><p><strong id="red-msg">不能进行</strong>进程调度与切换的情况</p><ul><li>在<strong id="red-msg">处理中断的过程</strong>中，中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换</li><li>进程在<strong id="red-msg">操作系统内核程序临界区</strong>中</li><li>在<strong id="red-msg">原子操作过程中（原语）</strong>，原子操作不可中断，要一气呵成（如之前讲过的修改 PCB 中进程状态标志，并把 PCB 放到相应队列）</li></ul></li></ul><p>在某些操作系统中，不允许应用程序被动放弃处理机；而有的操作系统会因为更加紧急的进程需要执行而强行剥夺当前运行进程的处理机，这就引出了<a href="#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%96%B9%E5%BC%8F">进程的调度方式</a></p><h2 id="进程调度的方式" tabindex="-1"><a class="header-anchor" href="#进程调度的方式"><span>进程调度的方式</span></a></h2><p>进程的调度方式有两种：<strong>非剥夺调度方式</strong>和<strong>剥夺调度方式</strong></p><h3 id="非剥夺调度方式" tabindex="-1"><a class="header-anchor" href="#非剥夺调度方式"><span>非剥夺调度方式</span></a></h3><p><strong id="blue-msg">非剥夺调度方式</strong>，又称<strong id="blue-msg">非抢占方式</strong>。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态</p><p>实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</p><h3 id="剥夺调度方式" tabindex="-1"><a class="header-anchor" href="#剥夺调度方式"><span>剥夺调度方式</span></a></h3><p><strong id="blue-msg">剥夺调度方式</strong>，又称<strong id="blue-msg">抢占方式</strong>。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程</p><p>可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。适合于分时操作系统、实时操作系统</p><h2 id="进程的切换" tabindex="-1"><a class="header-anchor" href="#进程的切换"><span>进程的切换</span></a></h2><p>“狭义的进程调度”与“进程切换”的区别：</p><p><strong>狭义的进程调度</strong>指的是从就绪队列中<strong id="red-msg">选中一个要运行的进程</strong>。（这个进程可以是刚刚被暂停执行的进程也可能是另一个进程，后一种情况就需要<strong id="red-msg">进程切换</strong>）<br> 进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程</p><p><strong>广义的进程调度</strong>包含了选择一个进程和进程切换两个步骤</p><p>进程切换的过程主要完成了：</p><ol><li>对原来运行进程各种数据的保存</li><li>对新的进程各种数据的恢复<br> （如：程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块）</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong id="red-msg">进程切换是有代价的</strong>，因此如果<strong id="red-msg">过于频繁的进行</strong>进程<strong id="red-msg">调度</strong>、<strong id="red-msg">切换</strong>，必然会使整个<strong id="red-msg">系统的效率降低</strong>,使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少</p></div><h2 id="调度器-调度程序" tabindex="-1"><a class="header-anchor" href="#调度器-调度程序"><span>调度器 / 调度程序</span></a></h2><p>对于不支持线程的操作系统，调度程序操作的对象是<strong id="blue-msg">进程</strong>；</p><p>对于支持线程的操作系统，调度程序操作的对象是<strong id="blue-msg">内核线程</strong>；</p><figure><img src="//store.s1r0ko.top/svg/m/os/12/2_ver_1.svg" alt="线程不同的状态" tabindex="0" loading="lazy"><figcaption>线程不同的状态</figcaption></figure><p>选中和时间片用完导致的状态变换由<strong id="red-msg">调度器 / 调度程序（ Scheduler ）</strong>引起</p><p>调度程序决定：</p><ul><li><p>让谁运行？ —— 调度算法</p></li><li><p>运行多长时间？ —— 时间片大小</p></li><li><p>调度时机？ —— 什么事件会触发“调度程序”？</p><ul><li><strong id="red-msg">创建新进程</strong></li><li><strong id="red-msg">进程退出</strong></li><li><strong id="red-msg">运行进程阻塞</strong></li><li><strong id="red-msg">I/O 中断发生</strong>（可能唤醒某些阻塞进程）</li><li>非抢占式调度策略，只有运行进程阻塞或退出才触发调度程序工作</li><li>抢占式调度策略，每个<strong id="blue-msg">时钟中断</strong>或 k 个时钟中断会触发调度程序工作</li></ul></li></ul><h2 id="闲逛进程" tabindex="-1"><a class="header-anchor" href="#闲逛进程"><span>闲逛进程</span></a></h2><p>调度程序永远的备胎，没有其他就绪进程时，运行闲逛进程（ idle 进程）</p><ul><li><p>闲逛进程的特性：</p><ul><li>优先级最低</li><li>可以是 0 地址指令，占一个完整的指令周期（指令周期末尾例行检查中断）</li><li>能耗低</li></ul></li></ul><h2 id="调度算法的评价指标" tabindex="-1"><a class="header-anchor" href="#调度算法的评价指标"><span>调度算法的评价指标</span></a></h2><p>通常通过下面几个指标来评价某种调度算法的性能</p><h3 id="cpu-利用率" tabindex="-1"><a class="header-anchor" href="#cpu-利用率"><span>CPU 利用率 👍</span></a></h3><p>由于早期的 CPU 造价极其昂贵，因此人们会希望让 CPU 尽可能多地工作</p><p>CPU 利用率：指 CPU “忙碌”的时间占总时间的比例</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>CPU 利用率</mtext><mo>=</mo><mfrac><mtext>忙碌时间</mtext><mtext>总时间</mtext></mfrac></mrow><annotation encoding="application/x-tex"> \\text{CPU 利用率} = \\frac{\\text{忙碌时间}}{\\text{总时间}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">CPU </span><span class="mord cjk_fallback">利用率</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">总时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">忙碌时间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>',58),s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"有的题目还会要求计算某种设备的利用率"),s("p",null,"eg. 某计算机只支持单道程序，某个作业刚开始需要在 CPU 上运行 5 秒，再用打印机打印输出 5 秒，之后再执行 5 秒，才能结束。在此过程中， CPU 利用率、打印机利用率分别是多少？"),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right",columnspacing:""},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"CPU 利用率"),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"5")]),s("mrow",null,[s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"5")])]),s("mo",null,"="),s("mfrac",null,[s("mn",null,"10"),s("mn",null,"15")]),s("mo",null,"="),s("mn",null,"0.667")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"打印机利用率"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"5"),s("mrow",null,[s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"5")])]),s("mo",null,"="),s("mfrac",null,[s("mn",null,"5"),s("mn",null,"15")]),s("mo",null,"="),s("mn",null,"0.333")])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{align*} \\text{CPU 利用率} = \\frac{5 + 5}{5 + 5 + 5} = \\frac{10}{15} = 0.667 \\\\ \\\\ \\text{打印机利用率} = \\frac{5}{5 + 5 + 5} = \\frac{5}{15} = 0.333 \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"6.2815em","vertical-align":"-2.8908em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.3908em"}},[s("span",{style:{top:"-5.3908em"}},[s("span",{class:"pstrut",style:{height:"3.3214em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord"},"CPU "),s("span",{class:"mord cjk_fallback"},"利用率")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"15")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0.667")])]),s("span",{style:{top:"-3.4814em"}},[s("span",{class:"pstrut",style:{height:"3.3214em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.5em"}},[s("span",{class:"pstrut",style:{height:"3.3214em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"打印机利用率")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"15")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0.333")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.8908em"}},[s("span")])])])])])])])])])])])],-1),t('<h3 id="系统吞吐量" tabindex="-1"><a class="header-anchor" href="#系统吞吐量"><span>系统吞吐量 👍</span></a></h3><p>对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业，这就是系统吞吐量</p><p>系统吞吐量：单位时间内完成作业的数量</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>系统吞吐量</mtext><mo>=</mo><mfrac><mtext>完成作业的数量</mtext><mtext>单位时间</mtext></mfrac></mrow><annotation encoding="application/x-tex"> \\text{系统吞吐量} = \\frac{\\text{完成作业的数量}}{\\text{单位时间}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">系统吞吐量</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">单位时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">完成作业的数量</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>eg. 某计算机系统处理完 10 道作业，共花费 100 秒，则系统吞吐量为？</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>系统吞吐量</mtext><mo>=</mo><mfrac><mn>10</mn><mn>100</mn></mfrac><mo>=</mo><mn>0.1</mn><mtext> 道 / 秒</mtext></mrow><annotation encoding="application/x-tex"> \\text{系统吞吐量} = \\frac{10}{100} = 0.1 \\text{ 道 / 秒} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">系统吞吐量</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">100</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.1</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">道</span><span class="mord"> / </span><span class="mord cjk_fallback">秒</span></span></span></span></span></span></p><h3 id="周转时间" tabindex="-1"><a class="header-anchor" href="#周转时间"><span>周转时间 👍</span></a></h3><p>对于计算机的用户来说，他很关心自己的作业从提交到完成花了多少时间</p><p>周转时间，是指从<strong id="blue-msg">作业被提交给系统开始</strong>，到<strong id="blue-msg">作业完成为止</strong>的这段时间间隔<br> 它包括四个部分：作业在外存后备队列上等待作业调度（高级调度）的时间、进程在就绪队列上等待进程调度（低级调度）的时间、进程在 CPU 上执行的时间、进程等待 I/O 操作完成的时间。后三项在一个作业的整个处理过程中，可能发生多次。</p>',9),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right",columnspacing:""},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"（作业）周转时间"),s("mo",null,"="),s("mtext",null,"作业完成时间"),s("mo",null,"−"),s("mtext",null,"作业被提交时间")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"平均周转时间"),s("mo",null,"="),s("mfrac",null,[s("mtext",null,"各作业周转时间之和"),s("mtext",null,"作业数")])])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{align*} \\text{（作业）周转时间} = \\text{作业完成时间} - \\text{作业被提交时间} \\\\ \\\\ \\text{平均周转时间} = \\frac{\\text{各作业周转时间之和}}{\\text{作业数}} \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"5.3463em","vertical-align":"-2.4232em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.9232em"}},[s("span",{style:{top:"-5.4435em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"（作业）周转时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业完成时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业被提交时间")])])]),s("span",{style:{top:"-3.9435em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.9232em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"平均周转时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业数")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"各作业周转时间之和")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.4232em"}},[s("span")])])])])])])])])])])],-1),s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"有的作业运行时间短，有的作业运行时间长，因此在周转时间相同的情况下，运行时间不同的作业，给用户的感觉肯定是不一样的"),s("p",null,[a("对此，我们可以引入"),s("strong",{id:"blue-msg"},"带权周转时间")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right",columnspacing:""},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"带权周转时间"),s("mo",null,"="),s("mfrac",null,[s("mtext",null,"作业周转时间"),s("mtext",null,"作业实际运行时间")]),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mtext",null,"作业完成时间"),s("mo",null,"−"),s("mtext",null,"作业被提交时间")]),s("mtext",null,"作业实际运行时间")])])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mtext",null,"平均带权周转时间"),s("mo",null,"="),s("mfrac",null,[s("mtext",null,"各作业带权周转时间之和"),s("mtext",null,"作业数")])])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{align*} \\text{带权周转时间} = \\frac{\\text{作业周转时间}}{\\text{作业实际运行时间}} = \\frac{\\text{作业完成时间} - \\text{作业被提交时间}}{\\text{作业实际运行时间}} \\\\ \\\\ \\text{平均带权周转时间} = \\frac{\\text{各作业带权周转时间之和}}{\\text{作业数}} \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"6.1927em","vertical-align":"-2.8463em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.3463em"}},[s("span",{style:{top:"-5.3463em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"带权周转时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业实际运行时间")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业周转时间")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业实际运行时间")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业完成时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业被提交时间")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.5203em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.5em"}},[s("span",{class:"pstrut",style:{height:"3.3603em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"平均带权周转时间")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"作业数")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"各作业带权周转时间之和")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.8463em"}},[s("span")])])])])])])])])])])]),s("p",null,[a("带权周转时间必然 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"≥")]),s("annotation",{encoding:"application/x-tex"},"\\ge")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mrel"},"≥")])])]),a(" 1"),s("br"),a(" 带权周转时间与周转时间都是越小越好")]),s("p",null,[a("对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多，带权周转时间更小，用户满意度更高"),s("br"),a(" 对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高")])],-1),t('<h3 id="等待时间" tabindex="-1"><a class="header-anchor" href="#等待时间"><span>等待时间</span></a></h3><p>计算机的用户希望自己的作业尽可能少的等待处理机<br> 等待时间，指进程 / 作业<strong id="blue-msg">处于等待处理机状态时间之和</strong>，等待时间越长，用户满意度越低</p><p>对于<strong id="blue-msg">进程</strong>来说，等待时间就是指进程建立后<strong id="blue-msg">等待被服务的时间之和</strong>，在等待 I/O 完成的期间其实进程也是在被服务的，所以不计入等待时间</p><p>对于<strong id="blue-msg">作业</strong>来说，不仅要考虑<strong id="blue-msg">建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>作业会在外存中的后备队列等待被服务（调度）</p><p>作业调入内存后，建立对应的进程。这个进程会被 CPU 服务、会被 I/O 设备服务，当然也会有等待被服务的时候（比如等待 I/O 完成）</p></div><p>一个作业总共需要被 CPU 服务多久，被 I/O 设备服务多久一般是确定不变的，因此调度算法其实只会影响作业 / 进程的等待时间。当然，与前面指标类似，也有“<strong id="blue-msg">平均等待时间</strong>”来评价整体性能</p><h3 id="响应时间" tabindex="-1"><a class="header-anchor" href="#响应时间"><span>响应时间</span></a></h3><p>对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早地开始被系统服务、回应</p><p>响应时间，指从用户<strong id="blue-msg">提交请求</strong>到<strong id="blue-msg">首次产生响应</strong>所用的时间。响应时间越小，用户满意度越高</p><h2 id="调度算法" tabindex="-1"><a class="header-anchor" href="#调度算法"><span>调度算法</span></a></h2><p>将按照以下框架分析各个算法</p><ol><li><p>算法思想</p></li><li><p>算法规则</p></li><li><p>这种调度算法是用于<strong id="blue-msg">作业调度</strong>还是<strong id="blue-msg">进程调度</strong>？</p></li><li><p>该算法是抢占式？还是非抢占式？</p></li><li><p>优点和缺点</p></li><li><p>是否会导致<strong id="red-msg">饥饿</strong>（某进程 / 作业长期得不到服务）</p></li></ol><h3 id="先来先服务" tabindex="-1"><a class="header-anchor" href="#先来先服务"><span>先来先服务</span></a></h3><div class="hint-container info"><p class="hint-container-title">先来先服务算法（ First Come First Serve ， FCFS ）</p><ul><li><strong>算法思想</strong></li></ul><p>主要从“公平”的角度考虑（类似于我们生活中排队买东西的例子）</p><ul><li><strong>算法规则</strong></li></ul><p>按照作业 / 进程到达的先后顺序进行服务</p><ul><li><strong>用于作业 / 进程调度</strong></li></ul><p>用于作业调度时，考虑的是哪个作业先到达后备队列；用于进程调度时，考虑的是哪个进程先到达就绪队列</p><ul><li><strong>是否可抢占</strong></li></ul><p>非抢占式的算法</p><ul><li><p><strong>优缺点</strong></p></li><li><p><strong>是否会导致饥饿</strong></p></li></ul><p>eg. 各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong id="blue-msg">先来先服务</strong>调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间</p><table><thead><tr><th style="text-align:center;">进程</th><th style="text-align:center;">到达时间</th><th style="text-align:center;">运行时间</th></tr></thead><tbody><tr><td style="text-align:center;">P1</td><td style="text-align:center;">0</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">P2</td><td style="text-align:center;">2</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;">P3</td><td style="text-align:center;">4</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">P4</td><td style="text-align:center;">5</td><td style="text-align:center;">4</td></tr></tbody></table><p>先来先服务调度算法：按照到达的先后顺序调度，事实上就是<strong id="blue-msg">等待时间越久</strong>的越优先得到服务</p><p>因此，调度顺序为： P1 → P2 → P3 → P4</p><p>周转时间：</p><p>P1 = 7 + 0 = 7<br> P2 = 4 + 2 = 6<br> P3 = 1 + 4 = 5<br> P4 = 4 + 5 = 9</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本例中的进程都是纯计算型的进程，一个进程到达后要么在等待，要么在运行。如果是又有计算、又有 I/O 操作的进程，其等待时间就是<strong id="blue-msg">周转时间-运行时间- I/O 操作的时间</strong></p></div></div>',14)]))}const o=n(r,[["render",i]]),g=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/Scheduling.html","title":"调度","lang":"zh-CN","frontmatter":{"title":"调度","date":"2025-08-22T00:00:00.000Z","icon":"gears","order":13,"category":["408","操作系统","考研"],"description":"调度的概念 当有大量任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题 调度的三个层次 高级调度 内存空间有限，有时无法将用户提交的作业全部放入内存 高级调度（作业调度） —— 按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"调度\\",\\"image\\":[\\"//store.s1r0ko.top/svg/m/os/12/2_ver_1.svg\\"],\\"datePublished\\":\\"2025-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T10:43:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/Scheduling.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"调度"}],["meta",{"property":"og:description","content":"调度的概念 当有大量任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题 调度的三个层次 高级调度 内存空间有限，有时无法将用户提交的作业全部放入内存 高级调度（作业调度） —— 按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//store.s1r0ko.top/svg/m/os/12/2_ver_1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T10:43:16.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T10:43:16.000Z"}]]},"git":{"createdTime":1755856639000,"updatedTime":1755945796000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":3,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":13.36,"words":4008},"filePathRelative":"art/learning/master/major/OperatingSystem/Scheduling.md","excerpt":"<h2>调度的概念</h2>\\n<p>当有大量任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题</p>\\n<h2>调度的三个层次</h2>\\n<h3>高级调度</h3>\\n<p>内存空间有限，有时无法将用户提交的作业全部放入内存</p>\\n<p><strong id=\\"blue-msg\\">高级调度（作业调度）</strong> —— 按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。<strong id=\\"red-msg\\">每个作业只调入一次，调出一次</strong>。作业调入时会建立 PCB ，调出时才撤销 PCB</p>","autoDesc":true}');export{o as comp,g as data};
