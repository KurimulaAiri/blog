import{_ as i,c as e,b as r,o as l}from"./app-BZBSUKqu.js";const n={};function p(a,t){return l(),e("div",null,t[0]||(t[0]=[r('<h2 id="操作系统的内核" tabindex="-1"><a class="header-anchor" href="#操作系统的内核"><span>操作系统的内核</span></a></h2><figure><img src="//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg" alt="计算机的体系结构" tabindex="0" loading="lazy"><figcaption>计算机的体系结构</figcaption></figure><p>如图所示，操作系统内核由以下几个部分组成：</p><ul><li><p>进程管理、存储器管理、设备管理等功能</p></li><li><p>时钟管理</p></li><li><p>中断处理</p></li><li><p>原语</p></li></ul><div class="hint-container tip"><p class="hint-container-title">原语</p><p>原语是一种特殊的程序具有原子性，也就是说：这段程序的运行必须<strong>一气呵成</strong>，不可被“中断”</p></div><p>内核是操作系统最基本、最核心的部分实现操作系统内核功能的那些程序就是内核程序</p><p>操作系统中，内核需要运行在内核态，非内核功能运行在用户态</p><p><strong>CPU 状态切换的过程是有成本的</strong>，要消耗不少时间，频繁地切换会<strong>降低系统性能</strong></p><p>内核分为两种：</p><h3 id="大内核-宏内核" tabindex="-1"><a class="header-anchor" href="#大内核-宏内核"><span>大内核 （宏内核）</span></a></h3><p>将操作系统的<strong>主要功能模块</strong>都作为系统内核，运行在核心态</p><p>采用大内核的系统通常也采用了“模块化”的设计思想</p><p>大内核为图中标注为内核的部分</p><ul><li><p>优点：高性能，内核内的各种功能都可以直接相互调用 👍</p></li><li><p>缺点：</p><ul><li>内核代码庞大，结构混乱，难以维护 👍</li><li>大内核中的某个功能模块出错，可能导致整个系统崩溃 👍</li></ul></li></ul><h3 id="微内核" tabindex="-1"><a class="header-anchor" href="#微内核"><span>微内核</span></a></h3><p>只把<strong>最基本的功能</strong>保留在内核（中断、原语、进程通信等）</p><p>微内核只保留和<strong>硬件相关</strong>的部分</p><ul><li><p>优点：</p><ul><li>内核功能少，结构清晰，方便维护 👍</li><li>内核外的某个功能出错不会导致整个系统崩溃 👍</li></ul></li><li><p>缺点：</p><ul><li>需要频繁地在核心态和用户态之间切换，性能低；且内核内的各个功能<strong>不能直接相互调用</strong>，需要通过内核的“消息传递”来<strong>间接通信</strong> 👍</li></ul></li></ul><h2 id="分层结构的内核" tabindex="-1"><a class="header-anchor" href="#分层结构的内核"><span>分层结构的内核</span></a></h2><p>内核分多层，每层可单向调用更低一层提供的接口</p><ul><li><p>优点：</p><ul><li><strong>便于调试和验证</strong>，自底向上逐层调试验证 👍</li><li>易扩充和易维护，各层之间调用接口清晰固定</li></ul></li><li><p>缺点：</p><ul><li>仅可调用相邻低层，难以合理定义各层的边界</li><li>效率低，不可跨层调用，系统调用执行时间长 👍</li></ul></li></ul><h2 id="模块化的内核设计" tabindex="-1"><a class="header-anchor" href="#模块化的内核设计"><span>模块化的内核设计</span></a></h2><p>将内核划分为多个模块，各模块之间相互协作。</p><p>内核 = 主模块 + 可加载内核模块 👍<br> 主模块：只负责核心功能，如进程调度、内存管理等 👍<br> 可加载内核模块：可以动态加载新模块到内核，而无需重新编译整个内核 👍</p><ul><li><p>优点：</p><ul><li>模块间逻辑清晰易于维护，确定模块间接口后即可<strong>多模块同时开发</strong></li><li>支持动态加载新的内核模块（如：安装设备驱动程序、安装新的文件系统模块到内核），增强 OS 适应性 👍</li><li>任何模块都可以直接调用其他模块，无需采用消息传递进行通信，效率高 👍</li></ul></li><li><p>缺点：</p><ul><li>模块间的接口定义未必合理、实用</li><li>模块间相互依赖，更难调试和验证</li></ul></li></ul><h2 id="外核" tabindex="-1"><a class="header-anchor" href="#外核"><span>外核</span></a></h2><p>内核负责进程调度、进程通信等功能，外核负责为用户进程分配<strong>未经抽象</strong>的硬件资源（比如连续的内存地址或连续的物理存储空间），且由外核负责<strong>保证资源使用安全</strong> 👍</p><ul><li><p>优点：</p><ul><li>外核可直接给用户进程分配“<strong>不虚拟、不抽象</strong>”的硬件资源，使用户进程可以更灵活的使用硬件资源 👍</li><li>减少了虚拟硬件资源的“<strong>映射层</strong>”，提升效率 👍</li></ul></li><li><p>缺点：</p><ul><li>降低了系统的一致性</li><li>使系统变得更复杂</li></ul></li></ul>',28)]))}const s=i(n,[["render",p]]),g=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/ArchitectureOfTheOperatingSystem.html","title":"操作系统的体系结构","lang":"zh-CN","frontmatter":{"title":"操作系统的体系结构","date":"2025-08-15T00:00:00.000Z","icon":"gears","order":7,"category":["408","操作系统","考研"],"description":"操作系统的内核 计算机的体系结构计算机的体系结构 如图所示，操作系统内核由以下几个部分组成： 进程管理、存储器管理、设备管理等功能 时钟管理 中断处理 原语 原语 原语是一种特殊的程序具有原子性，也就是说：这段程序的运行必须一气呵成，不可被“中断” 内核是操作系统最基本、最核心的部分实现操作系统内核功能的那些程序就是内核程序 操作系统中，内核需要运行在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统的体系结构\\",\\"image\\":[\\"//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-16T10:52:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/ArchitectureOfTheOperatingSystem.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"操作系统的体系结构"}],["meta",{"property":"og:description","content":"操作系统的内核 计算机的体系结构计算机的体系结构 如图所示，操作系统内核由以下几个部分组成： 进程管理、存储器管理、设备管理等功能 时钟管理 中断处理 原语 原语 原语是一种特殊的程序具有原子性，也就是说：这段程序的运行必须一气呵成，不可被“中断” 内核是操作系统最基本、最核心的部分实现操作系统内核功能的那些程序就是内核程序 操作系统中，内核需要运行在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T10:52:35.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T10:52:35.000Z"}]]},"git":{"createdTime":1755253525000,"updatedTime":1755341555000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":3,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":3.24,"words":973},"filePathRelative":"art/learning/master/major/OperatingSystem/ArchitectureOfTheOperatingSystem.md","excerpt":"<h2>操作系统的内核</h2>\\n<figure><img src=\\"//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg\\" alt=\\"计算机的体系结构\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>计算机的体系结构</figcaption></figure>\\n<p>如图所示，操作系统内核由以下几个部分组成：</p>\\n<ul>\\n<li>\\n<p>进程管理、存储器管理、设备管理等功能</p>\\n</li>\\n<li>\\n<p>时钟管理</p>\\n</li>\\n<li>\\n<p>中断处理</p>\\n</li>\\n<li>\\n<p>原语</p>\\n</li>\\n</ul>","autoDesc":true}');export{s as comp,g as data};
