import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as r,o as a}from"./app-CIPTUf9V.js";const s={};function l(i,t){return a(),n("div",null,t[0]||(t[0]=[r('<h2 id="什么是系统调用" tabindex="-1"><a class="header-anchor" href="#什么是系统调用"><span>什么是系统调用</span></a></h2><p>“系统调用”是操作系统提供给应用程序（程序员 / 编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong></p><h2 id="系统调用和库函数" tabindex="-1"><a class="header-anchor" href="#系统调用和库函数"><span>系统调用和库函数</span></a></h2><table><thead><tr><th style="text-align:center;">层级</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">普通应用程序</td><td style="text-align:center;">可直接进行系统调用，也可使用库函数，有的库函数涉及系统调用，有的不涉及</td></tr><tr><td style="text-align:center;">编程语言</td><td style="text-align:center;">向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便，库函数不一定都使用系统调用</td></tr><tr><td style="text-align:center;">操作系统</td><td style="text-align:center;">向上提供系统调用，使得上层程序能请求内核的服务</td></tr><tr><td style="text-align:center;">裸机</td><td style="text-align:center;">/</td></tr></tbody></table><h2 id="为什么需要系统调用" tabindex="-1"><a class="header-anchor" href="#为什么需要系统调用"><span>为什么需要系统调用</span></a></h2><p>应用程序通过<strong>系统调用</strong>请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此<strong>凡是与共享资源有关的操作（如存储分配、 I/O 操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。这样<strong>可以保证系统的稳定性和安全性</strong>，防止用户进行非法操作。</p><h2 id="系统调用的分类" tabindex="-1"><a class="header-anchor" href="#系统调用的分类"><span>系统调用的分类</span></a></h2><ul><li><strong>设备管理</strong></li></ul><p>完成设备的请求、释放、启动等功能</p><ul><li><strong>文件管理</strong></li></ul><p>完成文件的读、写、创建、删除等功能</p><ul><li><strong>进程控制</strong></li></ul><p>完成进程的创建、撤销、阻塞、唤醒等功能</p><ul><li><strong>进程管理</strong></li></ul><p>完成进程之间的消息传递、信号传递等功能</p><ul><li><strong>内存管理</strong></li></ul><p>完成内存的分配、回收、保护、共享等功能</p><h2 id="系统调用的过程" tabindex="-1"><a class="header-anchor" href="#系统调用的过程"><span>系统调用的过程</span></a></h2><p>传递系统调用参数 → 执行陷入指令（用户态） → 执行相应的内请求核程序处理系统调用（内核态） → 返回应用程序</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>陷入指令是在<strong>用户态</strong>执行的，执行陷入指令之后立即引发一个<strong>内中断</strong>，使 CPU 进入<strong>内核态</strong></p><p><strong>发出系统调用请求</strong>是在<strong>用户态</strong>，而<strong>对系统调用的相应处理</strong>在<strong>内核态</strong>下进行</p></div>',20)]))}const p=e(s,[["render",l]]),c=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/SystemCall.html","title":"系统调用","lang":"zh-CN","frontmatter":{"title":"系统调用","date":"2025-08-15T00:00:00.000Z","icon":"gears","order":6,"category":["408","操作系统","考研"],"description":"什么是系统调用 “系统调用”是操作系统提供给应用程序（程序员 / 编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务 系统调用和库函数 为什么需要系统调用 应用程序通过系统调用请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此凡是与共享资源有关的操作（如存储分配、 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统调用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-15T10:25:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/SystemCall.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"系统调用"}],["meta",{"property":"og:description","content":"什么是系统调用 “系统调用”是操作系统提供给应用程序（程序员 / 编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务 系统调用和库函数 为什么需要系统调用 应用程序通过系统调用请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此凡是与共享资源有关的操作（如存储分配、 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-15T10:25:25.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-15T10:25:25.000Z"}]]},"git":{"createdTime":1755253525000,"updatedTime":1755253525000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":1,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":2.02,"words":605},"filePathRelative":"art/learning/master/major/OperatingSystem/SystemCall.md","excerpt":"<h2>什么是系统调用</h2>\\n<p>“系统调用”是操作系统提供给应用程序（程序员 / 编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong></p>\\n<h2>系统调用和库函数</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">层级</th>\\n<th style=\\"text-align:center\\">说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">普通应用程序</td>\\n<td style=\\"text-align:center\\">可直接进行系统调用，也可使用库函数，有的库函数涉及系统调用，有的不涉及</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">编程语言</td>\\n<td style=\\"text-align:center\\">向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便，库函数不一定都使用系统调用</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">操作系统</td>\\n<td style=\\"text-align:center\\">向上提供系统调用，使得上层程序能请求内核的服务</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">裸机</td>\\n<td style=\\"text-align:center\\">/</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{p as comp,c as data};
