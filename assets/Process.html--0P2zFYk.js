import{_ as i,c as t,b as n,o as r}from"./app-BcdavXR7.js";const l={};function a(e,s){return r(),t("div",null,s[0]||(s[0]=[n(`<h2 id="进程的概念" tabindex="-1"><a class="header-anchor" href="#进程的概念"><span>进程的概念</span></a></h2><p>程序：是<strong>静态的</strong>，就是个存放在磁盘里的可执行文件，就是一系列的指令集合</p><p>进程（ Process ）：是<strong>动态的</strong>，是程序的一次执行过程，同一个程序多次执行会对应多个进程</p><h2 id="进程的组成" tabindex="-1"><a class="header-anchor" href="#进程的组成"><span>进程的组成</span></a></h2><p>一个<strong>进程实体（进程映像）<strong>由 PCB 、程序段、数据段组成：进程是</strong>动态的</strong>，进程实体（进程映像）是<strong>静态的</strong>。</p><p><strong id="red-msg">程序段、数据段、 PCB</strong> 三部分组成了<strong>进程实体</strong>（<strong>进程映像</strong>）<br> 引入进程实体的概念后，可把进程定义为：<br><strong>进程</strong>是进程实体的<strong id="blue-msg">运行过程</strong>，是系统进行<strong id="red-msg">资源分配</strong>和<strong id="red-msg">调度</strong>的一个独立单位</p><p><strong id="red-msg">注意：PCB是进程存在的唯一标志！</strong></p><h3 id="进程控制块-pcb" tabindex="-1"><a class="header-anchor" href="#进程控制块-pcb"><span>进程控制块（ PCB ）</span></a></h3><p>当进程被创建时，操作系统会为该进程分配一个<strong>唯一的</strong>、<strong>不重复的</strong>“身份证号”-- <strong id="red-msg">PID</strong> （Process ID ，进程 ID ）</p><p>包括 PID 、进程状态、进程优先级、进程控制信息、进程资源信息等将保存在一个称为 PCB （ Process Control Block ） 的数据结构中</p><p>所有操作系统需要使用的，<strong id="red-msg">用于管理进程的信息，都保存在 PCB 中</strong></p><p>PCB 是进程存在的唯一标志，当进程被创建时，操作系统为其创建 PCB ，当进程结束时，会回收其 PCB</p><h3 id="程序段" tabindex="-1"><a class="header-anchor" href="#程序段"><span>程序段</span></a></h3><p>PCB 部分是操作系统使用的，用于管理进程的信息，而程序段和数据段是进程使用的</p><p>程序的运行过程：</p><ol><li><p>源代码编译完成的可执行文件存在硬盘中 （ Windows 中为 .exe 后缀的文件）</p></li><li><p>运行前将可执行文件加载到内存中，其中将开辟三个空间分别是 PCB 、程序段和数据段<br> 程序段包含所有的指令，数据段包含运行中所需要的数据（包括源代码中显式声明的变量），操作系统则会在 PCB 中创建对应的 PID 等信息并初始化</p></li><li><p>操作系统会为进程分配 CPU 时间片，进程会按照时间片的大小，轮流使用 CPU 执行指令</p></li></ol><p>……</p><h2 id="进程的特征" tabindex="-1"><a class="header-anchor" href="#进程的特征"><span>进程的特征</span></a></h2><p>程序是静态的，进程是动态的，相比于程序，进程拥有以下特征：</p><ul><li>动态性</li></ul><p>进程是程序的一次执行过程，是动态地产生、变化和消亡的</p><p><strong id="blue-msg">动态性是进程最基本的特征</strong></p><ul><li>并发性</li></ul><p>内存中有多个进程实体，各进程可并发执行</p><ul><li>独立性</li></ul><p>进程是能独立运行、<strong>独立获得资源、独立接受调度</strong>的基本单位</p><ul><li>异步性</li></ul><p>各进程按各自独立的、不可预知的速度向前推进操作系统要提供“进程同步机制”来解决异步问题</p><ul><li>结构性</li></ul><p>每个进程都会配置一个 PCB ，结构上看，进程由程序段、数据段、 PCB 组成</p><p>上述特征仅要求理解，不需要逐字记忆</p><h2 id="进程的状态" tabindex="-1"><a class="header-anchor" href="#进程的状态"><span>进程的状态</span></a></h2><p>进程的状态分为三种基本状态：</p><ul><li>阻塞态</li><li>就绪态</li><li>运行态</li></ul><p>和其他两种状态</p><ul><li>创建态</li><li>终止态</li></ul><p>进程的 PCB 中，会有一个变量 state 来表示进程的当前状态。如： 1 表示创建态、 2 表示就绪态、 3 表示运行态……</p><p>进程的整个生命周期中，大部分时间都处于三种基本状态</p><p>单 CPU 情况下，同一时刻只会有一个进程处于<strong id="blue-msg">运行态</strong>，多核 CPU 情况下，可能有多个进程处于<strong id="blue-msg">运行态</strong></p><h3 id="创建态-new" tabindex="-1"><a class="header-anchor" href="#创建态-new"><span>创建态 （ New ）</span></a></h3><p>进程正在被创建时，它的状态是“<strong id="blue-msg">创建态</strong>”，在这个阶段操作系统会为进程分配资源、初始化 PCB</p><h3 id="就绪态-ready" tabindex="-1"><a class="header-anchor" href="#就绪态-ready"><span>就绪态 （ Ready ）</span></a></h3><p>当进程创建完成后，便进入“<strong id="blue-msg">就绪态</strong>”处于就绪态的进程已经具备运行条件，但由于没有空闲 CPU ，就暂时不能运行</p><h3 id="运行态-running" tabindex="-1"><a class="header-anchor" href="#运行态-running"><span>运行态 （ Running ）</span></a></h3><p>如果一个进程此时在 CPU 上运行，那么这个进程处于“<strong id="blue-msg">运行态</strong>”。CPU会执行该进程对应的程序（执行指令序列）</p><p>系统中可能会有很多个进程都处于就绪态，当 CPU 空闲时，操作系统就会选择一个就绪进程，让它上处理机运行</p><h3 id="阻塞态-blocked" tabindex="-1"><a class="header-anchor" href="#阻塞态-blocked"><span>阻塞态 （ Blocked ）</span></a></h3><p>阻塞态又称<strong>等待态</strong>（ Waiting ）</p><p>在进程运行的过程中，可能会请求<strong id="red-msg">等待某个事件的发生</strong>（如等待某种系统资源的分配，或者等待其他进程的响应），在这个事件发生之前，进程无法继续往下执行，此时操作系统会让这个进程下 CPU ，并让它进入“<strong id="blue-msg">阻塞态</strong>”</p><p>当 CPU 空闲时，又会选择另一个“<strong id="blue-msg">就绪态</strong>”进程上 CPU 运行</p><p>当<strong id="red-msg">等待的事件</strong>发生时，进程从“<strong id="blue-msg">阻塞态</strong>”回到“<strong id="blue-msg">就绪态</strong>”</p><h3 id="终止态-terminated" tabindex="-1"><a class="header-anchor" href="#终止态-terminated"><span>终止态 （ Terminated ）</span></a></h3><p>终止态又称<strong>结束态</strong></p><p>一个进程可以执行 exit 系统调用，请求操作系统终止该进程此时该进程会进入“<strong id="blue-msg">终止态</strong>”，操作系统会让该进程下 CPU ，并回收内存空间等资源，最后还要回收该进程的 PCB</p><p>当终止进程的工作完成之后，这个进程就彻底消失了</p><h2 id="进程状态的转换" tabindex="-1"><a class="header-anchor" href="#进程状态的转换"><span>进程状态的转换</span></a></h2><figure><img src="//store.s1r0ko.top/svg/m/os/10/1_ver_1.svg" alt="进程的转换" tabindex="0" loading="lazy"><figcaption>进程的转换</figcaption></figure><ul><li><p>阻塞态→就绪态不是进程自身能控制的，是一种<strong>被动行为</strong></p></li><li><p>运行态→阻塞态是一种进程自身做出的<strong>主动行为</strong></p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong id="red-msg">不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态</strong>（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）</p></div><h2 id="进程的组织" tabindex="-1"><a class="header-anchor" href="#进程的组织"><span>进程的组织</span></a></h2><p>为了对同一个状态下的各个进程进行统一的管理，操作系统会将各个进程的 PCB 组织起来</p><p>进程的组织方式主要分为两种：</p><ul><li>链式方式</li><li>索引方式</li></ul><h3 id="链接方式-链式方式" tabindex="-1"><a class="header-anchor" href="#链接方式-链式方式"><span>链接方式（链式方式）</span></a></h3><p>采用链接方式的进程组织方式，操作系统会维护几个队列，每个队列对应一个状态，如就绪队列、阻塞队列等</p><p>执行指针对应处于运行态的进程（单 CPU 计算机中，同一时刻只会有一个进程处于运行态）</p><p>就绪队列指针指向当前处于就绪态的进程，通常会把优先级高的进程放在队头</p><p>很多操作系统还会根据阻塞原因不同，再分为多个阻塞队列，比如：等待打印机的阻塞队列、等待磁盘的阻塞队列等</p><h3 id="索引方式" tabindex="-1"><a class="header-anchor" href="#索引方式"><span>索引方式</span></a></h3><p>采用索引方式的进程组织方式，操作系统会维护一个索引表，每个索引项对应一个进程的 PCB</p><p>执行指针仍然只指向当前处于运行态的进程</p><p>就绪表指针指向当前处于就绪态的进程，通常会把优先级高的进程放在表头</p><p>简要了解就行，索引方式的进程组织方式在实际中用的比较少，大部分操作系统采用链式方式进行组织</p><h2 id="进程控制" tabindex="-1"><a class="header-anchor" href="#进程控制"><span>进程控制</span></a></h2><p>什么是进程控制？</p><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能</p><p>简化理解:反正进程控制就是要实现进程状态转换</p><h3 id="如何实现进程控制" tabindex="-1"><a class="header-anchor" href="#如何实现进程控制"><span>如何实现进程控制</span></a></h3><figure><img src="//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg" alt="计算机的体系结构" tabindex="0" loading="lazy"><figcaption>计算机的体系结构</figcaption></figure><p>需使用“原语”实现</p><p><strong>原语</strong>的执行具有<strong>原子性</strong>，即执行过程只能一气呵成，期间<strong>不允许被中断</strong></p><p>原语需要一气呵成的原因就是为了避免进程在状态转换的执行过程中被中断，导致进程的状态与所在的队列不一致（根据上面进程组织的方式，不同状态的进程会被挂载到不同的队列中）</p><p>可以用“<strong>关中断</strong>指令”和“<strong>开中断</strong>指令”这两个<strong>特权指令</strong>实现<strong>原子性</strong></p><p>正常情况： CPU 每执行完一条指令都会例行检查是否有中断信号需要处理，如果有则暂停运行当前这段程序，转而执行相应的中断处理程序</p><p>CPU 执行了<strong>关中断指令</strong>之后，就不再例行检查中断信号，直到执行<strong>开中断指令</strong>之后才会恢复检查</p><p>这样，关中断、开中断之间的这些指令序列就是不可被中断的，这就实现了“<strong>原子性</strong>”，而期间收到的中断信号将会在开中断指令执行之后<strong>依次执行</strong></p><h3 id="进程的创建" tabindex="-1"><a class="header-anchor" href="#进程的创建"><span>进程的创建</span></a></h3><ul><li><p>创建原语</p><ul><li>申请空白 PCB</li><li>为新进程分配资源</li><li>初始化 PCB</li><li>将 PCB 插入就绪队列（<strong id="blue-msg">创建态→就绪态</strong>）</li></ul></li><li><p>引起进程创建的事件</p><ul><li>用户登录——分时系统中，用户登录成功，系统会建立为其建立一个新的进程</li><li>作业调度——多道批处理系统中，有新的作业放入内存时，会为其建立一个新的进程</li><li>提供服务——用户向操作系统提出某些请求时，会新建一个进程处理该请求</li><li>应用请求——由用户进程主动请求创建一个子进程</li></ul></li></ul><h3 id="进程的终止" tabindex="-1"><a class="header-anchor" href="#进程的终止"><span>进程的终止</span></a></h3><ul><li><p>撤销（终止）原语</p><ul><li>从 PCB 集合中找到终止进程的 PCB （<strong id="blue-msg">就绪态 / 阻塞态 / 运行态→终止态</strong>）</li><li>若进程正在运行，立即剥夺 CPU ，将 CPU 分配给其他进程</li><li>终止其所有子进程（进程之间的关系是树形结构，终止进程时，需要终止其所有子进程）</li><li>将该进程拥有的所有资源归还给父进程或操作系统</li><li>删除 PCB （<strong id="blue-msg">终止态→无</strong>）</li></ul></li><li><p>引起进程终止的事件</p><ul><li>正常结束——进程请求终止：使用 exit 系统调用</li><li>异常结束——整数除以 0 、非法使用特权指令：操作系统会强行终止该进程</li><li>外界干频—— Ctrl + Alt + delete ，用户选择杀掉进程</li></ul></li></ul><h3 id="进程的阻塞" tabindex="-1"><a class="header-anchor" href="#进程的阻塞"><span>进程的阻塞</span></a></h3><ul><li><p>阻塞原语</p><ul><li>找到要阻塞的进程对应的 PCB</li><li><strong id="red-msg">保护进程运行现场</strong>，将 PCB 状态信息设置为“阻塞态”，暂时停止进程运行</li><li>将 PCB 插入相应事件的等待队列（<strong id="blue-msg">就绪态→阻塞态</strong>）</li></ul></li><li><p>引起进程阻塞的事件</p><ul><li>需要等待系统分配某种资源</li><li>需要等待相互合作的其他进程完成工作</li></ul></li></ul><h3 id="进程的唤醒" tabindex="-1"><a class="header-anchor" href="#进程的唤醒"><span>进程的唤醒</span></a></h3><ul><li><p>唤醒原语</p><ul><li>在事件等待队列中找到要唤醒的进程对应的 PCB</li><li>将 PCB 从等待队列移除，设置进程为就绪态</li><li>将 PCB 插入就绪队列，等待被调度（<strong id="blue-msg">阻塞态→就绪态</strong>）</li></ul></li><li><p>引起进程唤醒的事件</p><ul><li>等待的事件发生</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>阻塞原语唤醒原语必须<strong>成对使用</strong>，<strong id="red-msg">因何事阻塞，就应由何事唤醒</strong></p></div><h3 id="进程的切换" tabindex="-1"><a class="header-anchor" href="#进程的切换"><span>进程的切换</span></a></h3><ul><li><p>切换原语</p><ul><li>将当前进程的<strong id="red-msg">运行环境信息（进程上下文包含 GPR、IR、PSW、PC 等寄存器内的必要信息）存入 PCB</strong></li><li>将当前进程的 PCB 移入相应队列</li><li>选择另一个进程执行，并更新其 PCB</li><li>根据 PCB <strong id="red-msg">恢复新进程所需的运行环境</strong>（<strong id="blue-msg">运行态→就绪态</strong>；<strong id="blue-msg">就绪态→运行态</strong>）</li></ul></li><li><p>引起进程切换的事件</p><ul><li>当前进程时间片到</li><li>有更高优先级的进程到达</li><li>当前进程主动阻塞</li><li>当前进程终止</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>运行环境信息在运行时主要存在于 CPU 的各个寄存器中，其包含：</p><ul><li>通用寄存器（GPR ，存放必要数据）</li><li>指令寄存器（IR ，存放当前正在执行的指令）</li><li>程序状态寄存器（PSW ，存放程序运行时的状态信息）</li><li>程序计数器（PC ，存放下一条指令的地址）</li><li>栈指针</li><li>基址指针</li><li>标志寄存器<br> ……</li></ul></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>无论哪个进程控制原语，要做的无非三类事情:</p><ol><li>更新进程 PCB 中的信息（修改进程状态（ state ），保存 / 恢复运行环境）</li><li>将 PCB 插入合适的队列</li><li>分配 / 回收资源</li></ol></div><h2 id="进程间的通信" tabindex="-1"><a class="header-anchor" href="#进程间的通信"><span>进程间的通信</span></a></h2><p>进程间通信（ IPC ， Inter-Process Communication ）是指两个进程之间产生数据交互</p><p>进程是分配系统资源的单位（包括内存地址空间、 CPU 时间等），因此<strong>各进程</strong>拥有的<strong>内存地址空间相互独立</strong></p><p>为了保证安全，一个进程不能直接访问另一个进程的地址空间</p><p>进程间通信主要采用三种方式：</p><ul><li>共享存储</li><li>消息传递</li><li>管道通信</li></ul><h3 id="共享存储" tabindex="-1"><a class="header-anchor" href="#共享存储"><span>共享存储</span></a></h3><p>通过“增加页表项 / 段表项”即可将同一片共享内存区映射到各个进程的地址空间中</p><p>Linux 中，如何实现共享内存：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="共享内存的 Linux 实现"><span>共享内存的 Linux 实现</span></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shm_open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 通过 shm_open 系统调用，申请一片共享内存区</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mmap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 通过 mmap 系统调用，将共享内存区映射到进程的地址空间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>为避免出错，各个进程对共享空间的<strong>访问</strong>应该是<strong id="red-msg">互斥的</strong></p><p>各个进程可使用操作系统内核提供的同步互斥工具（如 P 、 V 操作）来实现对共享空间的访问互斥</p><p>共享存储可以进一步划分为：</p><ul><li><p><strong id="blue-msg">基于存储区</strong>的共享：操作系统在内存中划出一块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种<strong>高级通信方式</strong></p></li><li><p><strong id="blue-msg">基于数据结构</strong>的共享：比如共享空间里只能放一个长度为 10 的数组。这种共享方式速度慢、限制多，是一种<strong>低级通信方式</strong></p></li></ul><h3 id="消息传递" tabindex="-1"><a class="header-anchor" href="#消息传递"><span>消息传递</span></a></h3><p>进程间的数据交换以<strong>格式化的消息</strong>（ Message ）为单位。进程通过操作系统提供的“发送消息”和“接收消息”两个<strong>原语</strong>进行数据交换。</p><div class="hint-container tip"><p class="hint-container-title"><strong>格式化的消息</strong></p><p>格式化的消息包含：</p><ul><li>消息头：发送进程 ID 、接受进程 ID 、消息长度等格式化的信息</li><li>消息体：包含实际要传递的数据</li></ul></div><p>消息传递分为两种方式：</p><ul><li><strong id="blue-msg">直接通信方式</strong></li></ul><p>消息发送进程要指明接收进程的 ID</p><p>具体过程：</p><p>假设有两个进程 P 、 Q ， P 要发送消息给 Q ，则：</p><ol><li>P 构造消息数据结构，使用发送原语，指明接收进程为 Q</li><li>操作系统接收到消息，将该消息挂载到操作系统内核的 P 进程的 PCB 中的消息队列上</li><li>Q 可以使用接收原语，指明发送进程 P</li><li>操作系统将消息从 P 进程的消息队列中取出，复制到 Q 进程对应的内存区域</li></ol><ul><li><strong id="blue-msg">间接通信方式</strong></li></ul><p>通过“信箱”间接地通信，因此又称“信箱通信方式”</p><p>具体过程：</p><p>仍假设有两个进程 P 、 Q ， P 要发送消息给 Q ，则：</p><ol><li>P 可以向操作系统申请数个信箱 A 、 B ，并在构造消息后，使用发送原语，指明接收信箱 A</li><li>Q 使用接收原语，指明接收信箱 A 中的消息</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>多个进程可以往同一个信箱中发送消息，也可以从同一个信箱中接收消息</p></div><h3 id="管道通信" tabindex="-1"><a class="header-anchor" href="#管道通信"><span>管道通信</span></a></h3><p>“管道”是一个特殊的共享文件，又名 pipe 文件。其实就是在内存中开辟一个大小固定的内存缓冲区</p><p>两个进程使用一个管道，并且是单向的，管道本质上是一个循环队列，消息只允许先进先出，依次读取</p><div class="hint-container tip"><p class="hint-container-title">管道通信和共享存储的区别</p><table><thead><tr><th>区分点</th><th>管道通信</th><th>共享存储</th></tr></thead><tbody><tr><td>读写数据</td><td>写方只允许按顺序写入，读方只能按顺序读取</td><td>读写方可以随机读写</td></tr></tbody></table></div><p>管道通信的要点：</p><ol><li>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则<strong>需要设置两个管道</strong></li><li>各进程要<strong>互斥</strong>地访问管道（由操作系统实现）</li><li>当管道<strong>写满时</strong>，写进程将<strong>阻塞</strong>，直到读进程将管道中的数据取走，即可唤醒写进程</li><li>当管道<strong>读空时</strong>，读进程将<strong>阻塞</strong>，直到写进程往管道中写入数据，即可唤醒读进程</li><li>管道中的数据一旦被读出，就彻底消失。因此，当多个进程读同一个管道时，可能会错乱。对此，通常有两种解决方案：<br> ① 一个管道允许<strong>多个写进程</strong>，<strong>一个读进程</strong>（ 2014 年 408 真题高教社官方答案）；（以此为准）<br> ② 允许有<strong>多个写进程</strong>，<strong>多个读进程</strong>，但系统会让各个读进程轮流从管道中读数据（ Linux 方案 ）</li></ol><p>管道随时可读可写，不需要填满后才能被读取</p>`,135)]))}const p=i(l,[["render",a]]),g=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/Process.html","title":"进程","lang":"zh-CN","frontmatter":{"title":"进程","date":"2025-08-18T00:00:00.000Z","icon":"gears","order":10,"category":["408","操作系统","考研"],"description":"进程的概念 程序：是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集合 进程（ Process ）：是动态的，是程序的一次执行过程，同一个程序多次执行会对应多个进程 进程的组成 一个进程实体（进程映像）由 PCB 、程序段、数据段组成：进程是动态的，进程实体（进程映像）是静态的。 程序段、数据段、 PCB 三部分组成了进程实体（进程映像） 引...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程\\",\\"image\\":[\\"//store.s1r0ko.top/svg/m/os/10/1_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/os/7/1_ver_1.svg\\"],\\"datePublished\\":\\"2025-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-20T10:03:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/Process.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"进程"}],["meta",{"property":"og:description","content":"进程的概念 程序：是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集合 进程（ Process ）：是动态的，是程序的一次执行过程，同一个程序多次执行会对应多个进程 进程的组成 一个进程实体（进程映像）由 PCB 、程序段、数据段组成：进程是动态的，进程实体（进程映像）是静态的。 程序段、数据段、 PCB 三部分组成了进程实体（进程映像） 引..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//store.s1r0ko.top/svg/m/os/10/1_ver_1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T10:03:50.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-20T10:03:50.000Z"}]]},"git":{"createdTime":1755517224000,"updatedTime":1755684230000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":3,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":14.7,"words":4409},"filePathRelative":"art/learning/master/major/OperatingSystem/Process.md","excerpt":"<h2>进程的概念</h2>\\n<p>程序：是<strong>静态的</strong>，就是个存放在磁盘里的可执行文件，就是一系列的指令集合</p>\\n<p>进程（ Process ）：是<strong>动态的</strong>，是程序的一次执行过程，同一个程序多次执行会对应多个进程</p>\\n<h2>进程的组成</h2>\\n<p>一个<strong>进程实体（进程映像）<strong>由 PCB 、程序段、数据段组成：进程是</strong>动态的</strong>，进程实体（进程映像）是<strong>静态的</strong>。</p>\\n<p><strong id=\\"red-msg\\">程序段、数据段、 PCB</strong> 三部分组成了<strong>进程实体</strong>（<strong>进程映像</strong>）<br>\\n引入进程实体的概念后，可把进程定义为：<br>\\n<strong>进程</strong>是进程实体的<strong id=\\"blue-msg\\">运行过程</strong>，是系统进行<strong id=\\"red-msg\\">资源分配</strong>和<strong id=\\"red-msg\\">调度</strong>的一个独立单位</p>","autoDesc":true}');export{p as comp,g as data};
