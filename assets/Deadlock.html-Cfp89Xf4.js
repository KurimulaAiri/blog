import{_ as e,c as n,b as r,o as l}from"./app-BQtMPnzM.js";const a={};function s(i,t){return l(),n("div",null,t[0]||(t[0]=[r('<h2 id="死锁的概念" tabindex="-1"><a class="header-anchor" href="#死锁的概念"><span>死锁的概念</span></a></h2><p>每个人都占有一个资源同时又在等待另一个人手里的资源。发生“死锁”</p><p>在并发环境下，各进程因竞争资源而造成的一种<strong id="blue-msg">互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象</strong>，就是“死锁”<br> 发生死锁后若无外力干涉，这些进程都将无法向前推进</p><h2 id="死锁、饥饿、死循环的区别" tabindex="-1"><a class="header-anchor" href="#死锁、饥饿、死循环的区别"><span>死锁、饥饿、死循环的区别</span></a></h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>死锁</td><td>各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</td></tr><tr><td>饥饿</td><td>由于长期得不到想要的资源，某进程无法向前推进的现象。比如：在短进程优先（ SPF ）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机，从而发生长进程“饥饿”</td></tr><tr><td>死循环</td><td>某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑 bug 导致的，有时是程序员故意设计的</td></tr></tbody></table><ul><li><p><strong>区别：</strong></p><ul><li>死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那<strong id="blue-msg">至少有两个或两个以上的进程同时发生死锁</strong>。另外，发生死锁的进程一定处于阻塞态</li><li><strong id="blue-msg">可能只有一个进程发生饥饿</strong>。发生饥饿的进程既可能是阻塞态（如长期得不到需要的 I/O 设备），也可能是就绪态（如长期得不到处理机）</li><li>可能只有一个进程发生死循环。死循环的进程可以上处理机运行（可以是运行态），只不过无法像期待的那样顺利推进。死锁和饥饿问题是由于操作系统分配资源的策略不合理导致的，而死循环是由代码逻辑的错误导致的。<strong id="blue-msg">死锁和饥饿是管理者（操作系统）的问题，死循环是被管理者的问题</strong></li></ul></li><li><p><strong>共同点：</strong></p><ul><li>都是进程无法顺利向前推进的现象（故意设计的死循环除外）</li></ul></li></ul><h2 id="死锁产生的必要条件" tabindex="-1"><a class="header-anchor" href="#死锁产生的必要条件"><span>死锁产生的必要条件</span></a></h2><p>产生死锁必须同时满足一下四个条件，只要其中任一条件不成立，死锁就不会发生</p><ol><li><strong>互斥条件：</strong><ul><li>只有对必须互斥使用的资源的争抢才会导致死锁（如哲学家的筷子、打印机设备）。像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的（因为进程不用阻塞等待这种资源）</li></ul></li><li><strong>不剥夺条件：</strong><ul><li>进程所获得的资源在未使用完之前，<strong id="blue-msg">不能由其他进程强行夺走</strong>，只能主动释放</li></ul></li><li><strong>请求和保持条件：</strong><ul><li>进程<strong id="blue-msg">已经保持了至少一个资源</strong>，但又提出了新的资源<strong id="blue-msg">请求</strong>，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己己有的资源<strong id="blue-msg">保持</strong>不放</li></ul></li><li><strong>循环等待条件：</strong><ul><li>存在一个进程<strong id="blue-msg">资源的循环等待链</strong>，每个进程都在等待下一个进程所持有的资源，形成一个环路，环路中没有一个进程能单独释放它自己已有的资源</li></ul></li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong id="red-msg">发生死锁时一定有循环等待，但是发生循环等待时未必死锁（循环等待是死锁的必要不充分条件）</strong> 👍</p><p>如果同类资源数大于 1 ，则即使有循环等待，也未必发生死锁。但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了</p></div><h2 id="何时会发生死锁" tabindex="-1"><a class="header-anchor" href="#何时会发生死锁"><span>何时会发生死锁</span></a></h2><p>主要有以下几种情况：</p><ol><li>对系统资源的竞争。各进程对不可剥夺的资源（如打印机）的竞争可能引起死锁，对可剥夺的资源（ CPU ）的竞争是不会引起死锁的</li><li>进程推进顺序非法。请求和释放资源的顺序不当，也同样会导致死锁。例如，并发执行的进程 P1、P2 分别申请并占有了资源 R1 、 R2 ，之后进程 P1 又紧接着申请资源 R2 ，而进程 P2 又申请资源 R1 ，两者会因为申请的资源被对方占有而阻塞，从而发生死锁</li><li>信号量的使用不当也会造成死锁。如生产者——消费者问题中，如果实现互斥的 P 操作在实现同步的 P 操作之前，就有可能导致死锁。（可以把互斥信号量、同步信号量也看做是一种抽象的系统资源）</li></ol><p>一句话来说就是，对不可剥夺资源的不合理分配，可能导致死锁</p><h2 id="死锁的处理策略" tabindex="-1"><a class="header-anchor" href="#死锁的处理策略"><span>死锁的处理策略</span></a></h2><p>主要通过以下策略来处理死锁：</p><ol><li><p>预防死锁。破坏死锁产生的四个必要条件中的一个或几个</p></li><li><p>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）</p></li><li><p>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁</p></li></ol><h3 id="死锁的预防" tabindex="-1"><a class="header-anchor" href="#死锁的预防"><span>死锁的预防</span></a></h3><p>破坏死锁产生的四个必要条件中的一个或几个，对于破坏的各个条件的具体措施如下所述</p><h4 id="破坏互斥条件" tabindex="-1"><a class="header-anchor" href="#破坏互斥条件"><span>破坏互斥条件</span></a></h4><p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。比如： <strong id="blue-msg">SPOOLing</strong> 技术。操作系统可以采用 SPOOling 技术把独占设备在逻辑上改造成共享设备。比如，用 SPOOLing 技术将打印机改造为共享设备……</p><p>使用了SPOOLing技术后，在各进程看来，自己对打印机资源的使用请求立即就被接收处理了，不需要再阻塞等待</p><p>该策略的缺点：<br> 并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性。因此，<strong id="blue-msg">很多时候都无法破坏互斥条件</strong></p><h4 id="破坏不剥夺条件" tabindex="-1"><a class="header-anchor" href="#破坏不剥夺条件"><span>破坏不剥夺条件</span></a></h4><p>有两个方案：</p><p>方案一：<br> 当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件</p><p>方案二：<br> 当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑各进程的优先级（比如：剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用）</p><p>该策略的缺点：</p><ol><li>实现起来比较复杂</li><li>释放已获得的资源可能造成前一阶段工作的失效。因此这种方法一般只适用于易保存和恢复状态的资源，如 CPU</li><li>反复地申请和释放资源会增加系统开销，降低系统吞吐量</li><li>若采用方案一，意味着只要暂时得不到某个资源，之前获得的那些资源就都需要放弃，以后再重新申请。如果一直发生这样的情况，就会导致进程饥饿</li></ol><h4 id="破坏请求和保持条件" tabindex="-1"><a class="header-anchor" href="#破坏请求和保持条件"><span>破坏请求和保持条件</span></a></h4><p>可以采用静态分配方法，即进程在运行前一次申请完它所需要的全部资源，在它的资源未满足前，不让它投入运行。一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的任何资源了</p><p>该策略实现起来简单，但也有明显的缺点：<br> 有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，资源利用率极低<br> 另外，该策略也有可能导致某些进程饥饿</p><p><span class="spoiler" tabindex="-1">饿的饿死，撑的撑死</span></p><h4 id="破坏循环等待条件" tabindex="-1"><a class="header-anchor" href="#破坏循环等待条件"><span>破坏循环等待条件</span></a></h4><p>可采用顺序资源分配法。首先给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源（即编号相同的资源）一次申请完</p><p>原理分析：<br> 一个进程只有已占有小编号的资源时，才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程不可能逆向地回来申请小编号的资源，从而就不会产生循环等待的现象</p><p>在任何一个时刻，总有一个进程拥有的资源编号是最大的，那这个进程申请之后的资源必然畅通无阻。因此，不可能出现所有进程都阻塞的死锁<br> 现象</p><p>该策略的缺点：</p><ol><li>不方便增加新的设备，因为可能需要重新分配所有的编号</li><li>进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源浪费</li><li>必须按规定次序申请资源，用户编程麻烦</li></ol><h3 id="死锁的避免" tabindex="-1"><a class="header-anchor" href="#死锁的避免"><span>死锁的避免</span></a></h3><h4 id="安全序列" tabindex="-1"><a class="header-anchor" href="#安全序列"><span>安全序列</span></a></h4><p>所谓<strong id="blue-msg">安全序列</strong>，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是<strong id="blue-msg">安全状态</strong>。当然，<strong id="blue-msg">安全序列可能有多个</strong></p><p>如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了<strong id="blue-msg">不安全状态</strong>。这就意味着之后<strong id="blue-msg">可能</strong>所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那<strong id="blue-msg">系统也有可能重新回到安全状态</strong>，不过我们在分配资源之前总是要考虑到最坏的情况</p><p>如果系统处于<strong id="blue-msg">安全状态</strong>，就<strong id="blue-msg">一定不会</strong>发生<strong id="blue-msg">死锁</strong>。如果系统进入<strong id="blue-msg">不安全状态</strong>，就<strong id="blue-msg">可能</strong>发生<strong id="blue-msg">死锁</strong>（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态）</p><p>因此可以<strong id="blue-msg">在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</strong>，以此决定是否答应资源分配请求。这也是“<strong id="red-msg">银行家算法</strong>”的核心思想</p><h4 id="银行家算法" tabindex="-1"><a class="header-anchor" href="#银行家算法"><span>银行家算法</span></a></h4><p>银行家算法是荷兰学者 Dijkstra 为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况。后来该算法被用在操作系统中，用于避免死锁</p><ul><li><strong>核心思想</strong></li></ul><p>在进程提出资源申请时，先预判此次分配是否会导致系统进入不安全状态。如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待</p><p>对应单一资源可以使用数字来表示资源量、对于多资源可以使用向量来表示资源量</p><p>假设现在有这么一些资源和其对应的需求量，可列出以下表格：</p><table><thead><tr><th style="text-align:center;">进程</th><th style="text-align:center;">最大需求</th><th style="text-align:center;">已分配</th><th style="text-align:center;">最多还需要</th></tr></thead><tbody><tr><td style="text-align:center;">P0</td><td style="text-align:center;">(7, 5, 3)</td><td style="text-align:center;">(0, 1, 0)</td><td style="text-align:center;">(7, 4, 3)</td></tr><tr><td style="text-align:center;">P1</td><td style="text-align:center;">(3, 2, 2)</td><td style="text-align:center;">(2, 0, 0)</td><td style="text-align:center;">(1, 2, 2)</td></tr><tr><td style="text-align:center;">P2</td><td style="text-align:center;">(9, 0, 2)</td><td style="text-align:center;">(3, 0, 2)</td><td style="text-align:center;">(6, 0, 0)</td></tr><tr><td style="text-align:center;">P3</td><td style="text-align:center;">(2, 2, 2)</td><td style="text-align:center;">(2, 1, 1)</td><td style="text-align:center;">(0, 1, 1)</td></tr><tr><td style="text-align:center;">P4</td><td style="text-align:center;">(4, 3, 3)</td><td style="text-align:center;">(0, 0, 2)</td><td style="text-align:center;">(4, 3, 1)</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">资源总数</th><th style="text-align:center;">剩余可用资源</th></tr></thead><tbody><tr><td style="text-align:center;">(10, 5, 7)</td><td style="text-align:center;">(3, 3, 2)</td></tr></tbody></table><ul><li><strong>具体算法步骤</strong></li></ul><ol><li>依次检查剩余可用资源 (3,3,2) 是否能满足各进程的需求，可满足 P1 需求，将 P1 加入安全序列，并更新剩余可用资源值为 (5,3,2)</li><li>依次检查剩余可用资源 (5,3,2) 是否能满足剩余进程（不包括已加入安全序列的进程）的需求，可满足 P3 需求，将 P3 加入安全序列，并更新剩余可用资源值为 (7,4,3)</li><li>依次检查剩余可用资源 (7,4,3) 是……</li></ol><p>以此类推，共五次循环检查即可将5个进程都加入安全序列中，最终可得一个安全序列。<br> 该算法称为<strong id="red-msg">安全性算法</strong>。可以很方便地用代码实现以上流程，每一轮检查都从编号较小的进程开始检查</p><p>实际做题时可以更快速的得到安全序列：</p><p>经对比发现， (3,3,2) 可满足 P1 、 P3 ，说明无论如何，这两个进程的资源需求一定是可以依次被满足的，因此 P1 、 P3 一定可以顺利的执行完，并归还资源。可把 P1 、 P3 先加入安全序列</p><p>(2,0,0) + (2,1,1) + (3,3,2) = (7,4,3)</p><p>剩下的 P0 、 P2 、 P4 都可被满足。同理，这些进程都可以加入安全序列</p><p>于是， 5 个进程全部加入安全序列，说明此时系统处于安全状态，暂不可能发生死锁</p><ul><li><strong>代码实现</strong></li></ul>',62)]))}const o=e(a,[["render",s]]),p=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/Deadlock.html","title":"死锁","lang":"zh-CN","frontmatter":{"title":"死锁","date":"2025-09-11T00:00:00.000Z","icon":"gears","order":17,"category":["408","操作系统","考研"],"description":"死锁的概念 每个人都占有一个资源同时又在等待另一个人手里的资源。发生“死锁” 在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁” 发生死锁后若无外力干涉，这些进程都将无法向前推进 死锁、饥饿、死循环的区别 区别： 死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那至少有...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"死锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-15T09:28:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/Deadlock.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"死锁"}],["meta",{"property":"og:description","content":"死锁的概念 每个人都占有一个资源同时又在等待另一个人手里的资源。发生“死锁” 在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁” 发生死锁后若无外力干涉，这些进程都将无法向前推进 死锁、饥饿、死循环的区别 区别： 死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那至少有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T09:28:01.000Z"}],["meta",{"property":"article:published_time","content":"2025-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T09:28:01.000Z"}]]},"git":{"createdTime":1757642107000,"updatedTime":1757928481000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199qq@gmail.com","commits":2,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":11.4,"words":3421},"filePathRelative":"art/learning/master/major/OperatingSystem/Deadlock.md","excerpt":"<h2>死锁的概念</h2>\\n<p>每个人都占有一个资源同时又在等待另一个人手里的资源。发生“死锁”</p>\\n<p>在并发环境下，各进程因竞争资源而造成的一种<strong id=\\"blue-msg\\">互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象</strong>，就是“死锁”<br>\\n发生死锁后若无外力干涉，这些进程都将无法向前推进</p>\\n<h2>死锁、饥饿、死循环的区别</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>名称</th>\\n<th>解释</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>死锁</td>\\n<td>各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</td>\\n</tr>\\n<tr>\\n<td>饥饿</td>\\n<td>由于长期得不到想要的资源，某进程无法向前推进的现象。比如：在短进程优先（ SPF ）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机，从而发生长进程“饥饿”</td>\\n</tr>\\n<tr>\\n<td>死循环</td>\\n<td>某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑 bug 导致的，有时是程序员故意设计的</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{o as comp,p as data};
