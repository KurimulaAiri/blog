import{_ as a,c as n,b as t,o as p}from"./app-A5gwOTyh.js";const e={};function i(m,s){return p(),n("div",null,s[0]||(s[0]=[t('<h2 id="内存的基础知识" tabindex="-1"><a class="header-anchor" href="#内存的基础知识"><span>内存的基础知识 👍</span></a></h2><p>内存可存放数据。程序执行前需要先放到内存中才能被 CPU 处理——缓和 CPU 与硬盘之间的速度矛盾</p><p>内存地址从 0 开始，每个地址对应一个存储单元<br> 内存中也有一个一个的“小房间”，每个小房间就是一个“存储单元”<br> 如果计算机“按字节编址”则每个存储单元大小为 1 字节，即 1B ，即 8 个二进制位<br> 如果字长为 16 位的计算机“按字编址”，则每个存储单元大小为 1 个字;每个字的大小为 16 个二进制位</p><h2 id="一些数量单位" tabindex="-1"><a class="header-anchor" href="#一些数量单位"><span>一些数量单位</span></a></h2><p>1 B = 8 位（bit）<br> 1 KB = 1024 B = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span></span></span></span> B<br> 1 MB = 1024 KB = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">20</span></span></span></span></span></span></span></span></span></span></span></span> B<br> 1 GB = 1024 MB = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">30</span></span></span></span></span></span></span></span></span></span></span></span> B<br> 1 TB = 1024 GB = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>40</mn></msup></mrow><annotation encoding="application/x-tex">2^{40}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">40</span></span></span></span></span></span></span></span></span></span></span></span> B</p><p>程序经过编译、链接后生成的指令中指明的是逻辑地址（相对地址），即:相对于进程的起始地址而言的地址</p><h2 id="如何通过逻辑地址获取物理地址" tabindex="-1"><a class="header-anchor" href="#如何通过逻辑地址获取物理地址"><span>如何通过逻辑地址获取物理地址 👍</span></a></h2><p>主要有三种方式：</p><h3 id="绝对装入" tabindex="-1"><a class="header-anchor" href="#绝对装入"><span>绝对装入</span></a></h3><p>在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码</p><p>装入程序按照装入模块中的地址，将程序和数据装入内存</p><p>绝对装入<strong id="red-msg">只适用于单道程序环境</strong></p><h3 id="可重定位装入-静态重定位" tabindex="-1"><a class="header-anchor" href="#可重定位装入-静态重定位"><span>可重定位装入（静态重定位）</span></a></h3><p>又称可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址进行“重定位”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的）</p><p>一般是多道批处理程序使用</p><h3 id="动态运行时装入-动态重定位" tabindex="-1"><a class="header-anchor" href="#动态运行时装入-动态重定位"><span>动态运行时装入（动态重定位）</span></a></h3><p>静态重定位的特点是在一个作业装入内存时，<strong id="red-msg">必须分配其要求的全部内存空间</strong>，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，<strong id="red-msg">在运行期间就不能再移动</strong>，也不能再申请内存空间</p><p>又称动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是<strong id="red-msg">把地址转换推迟到程序真正要执行时才进行</strong>。因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个<strong id="red-msg">重定位寄存器</strong>的支持</p><div class="hint-container tip"><p class="hint-container-title">重定位寄存器的作用</p><p>存放装入模块存放的<strong id="blue-msg">起始位置</strong></p></div><p>采用动态重定位时<strong id="red-msg">允许程序在内存中发生移动</strong>，并且可将程序分配到不连续的存储区中;在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，根据需要动态申请分配内存;便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间</p><p>现代操作系统多使用动态运行时装入方式</p><h2 id="从高级语言到程序" tabindex="-1"><a class="header-anchor" href="#从高级语言到程序"><span>从高级语言到程序 👍</span></a></h2><p>编译：将高级语言编写的程序转换为机器语言的程序（每个高级语言文件对应一个目标模块，通常为 <code>*.o</code> 的拓展名）</p><p>链接：将编译后的多个目标模块与所需的库函数链接起来，组装生成一个可执行文件（装入模块）</p><h2 id="链接的三种方式" tabindex="-1"><a class="header-anchor" href="#链接的三种方式"><span>链接的三种方式 👍</span></a></h2><ul><li><strong>静态链接</strong></li></ul><p>在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块），之后不再拆开</p><ul><li><strong>装入时动态链接</strong></li></ul><p>将各目标模块装入内存时，边装入边链接的链接方式</p><ul><li><strong>运行时动态链接</strong> 👍</li></ul><p>在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享</p><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h2><p>操作系统需要对实现以下四个功能以实现内存管理</p><ol><li><p><strong>内存的分配与回收</strong></p></li><li><p><strong>对内存空间进行扩充</strong></p></li></ol><p>操作系统需要提供某种技术从逻辑上对内存空间进行扩充</p><ol start="3"><li><strong>地址转换（三种装入方式）</strong></li></ol><p>为了使编程更方便，程序员写程序时应该只需要关注指令、数据的逻辑地址。而逻辑地址到物理地址的转换（这个过程称为地址重定位）应该由操作系统负责，这样就保证了程序员写程序时不需要关注物理内存的实际情况</p><ol start="4"><li><strong>内存保护</strong></li></ol><p>操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，互不干扰</p><p>内存保护一般使用两种方法</p><ul><li><strong>设置一对上、下限寄存器</strong></li></ul><p>在 CPU 中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时， CPU 检查是否越界</p><ul><li><strong>越界检查</strong></li></ul><p>采用重定位寄存器（又称基址寄存器）和界地址寄存器（又称限长寄存器）进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址</p><h2 id="进程的内存映像" tabindex="-1"><a class="header-anchor" href="#进程的内存映像"><span>进程的内存映像</span></a></h2>',45)]))}const l=a(e,[["render",i]]),o=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/Memory.html","title":"内存","lang":"zh-CN","frontmatter":{"title":"内存","date":"2025-09-25T00:00:00.000Z","icon":"gears","order":18,"category":["408","操作系统","考研"],"description":"内存的基础知识 👍 内存可存放数据。程序执行前需要先放到内存中才能被 CPU 处理——缓和 CPU 与硬盘之间的速度矛盾 内存地址从 0 开始，每个地址对应一个存储单元 内存中也有一个一个的“小房间”，每个小房间就是一个“存储单元” 如果计算机“按字节编址”则每个存储单元大小为 1 字节，即 1B ，即 8 个二进制位 如果字长为 16 位的计算机“...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-26T01:37:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/Memory.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"内存"}],["meta",{"property":"og:description","content":"内存的基础知识 👍 内存可存放数据。程序执行前需要先放到内存中才能被 CPU 处理——缓和 CPU 与硬盘之间的速度矛盾 内存地址从 0 开始，每个地址对应一个存储单元 内存中也有一个一个的“小房间”，每个小房间就是一个“存储单元” 如果计算机“按字节编址”则每个存储单元大小为 1 字节，即 1B ，即 8 个二进制位 如果字长为 16 位的计算机“..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-26T01:37:59.000Z"}],["meta",{"property":"article:published_time","content":"2025-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-26T01:37:59.000Z"}]]},"git":{"createdTime":1758850679000,"updatedTime":1758850679000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":1,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":4.93,"words":1480},"filePathRelative":"art/learning/master/major/OperatingSystem/Memory.md","excerpt":"<h2>内存的基础知识 👍</h2>\\n<p>内存可存放数据。程序执行前需要先放到内存中才能被 CPU 处理——缓和 CPU 与硬盘之间的速度矛盾</p>\\n<p>内存地址从 0 开始，每个地址对应一个存储单元<br>\\n内存中也有一个一个的“小房间”，每个小房间就是一个“存储单元”<br>\\n如果计算机“按字节编址”则每个存储单元大小为 1 字节，即 1B ，即 8 个二进制位<br>\\n如果字长为 16 位的计算机“按字编址”，则每个存储单元大小为 1 个字;每个字的大小为 16 个二进制位</p>\\n<h2>一些数量单位</h2>\\n<p>1 B = 8 位（bit）<br>\\n1 KB = 1024 B = <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding=\\"application/x-tex\\">2^{10}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8141em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.8141em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\">10</span></span></span></span></span></span></span></span></span></span></span></span> B<br>\\n1 MB = 1024 KB = <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding=\\"application/x-tex\\">2^{20}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8141em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.8141em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\">20</span></span></span></span></span></span></span></span></span></span></span></span> B<br>\\n1 GB = 1024 MB = <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding=\\"application/x-tex\\">2^{30}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8141em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.8141em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\">30</span></span></span></span></span></span></span></span></span></span></span></span> B<br>\\n1 TB = 1024 GB = <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mn>40</mn></msup></mrow><annotation encoding=\\"application/x-tex\\">2^{40}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8141em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.8141em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\">40</span></span></span></span></span></span></span></span></span></span></span></span> B</p>","autoDesc":true}');export{l as comp,o as data};
