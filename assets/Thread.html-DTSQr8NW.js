import{c as e,b as r,d as a,o as l,M as i}from"./app-BZBSUKqu.js";const o={__name:"Thread.html",setup(n){return(s,t)=>(l(),e("div",null,[t[0]||(t[0]=r('<h2 id="线程的概念" tabindex="-1"><a class="header-anchor" href="#线程的概念"><span>线程的概念</span></a></h2><p>在没引入线程的概念之前，所有应用只能串行运行</p><p>有的进程可能需要“同时”做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了“线程”，来增加并发度。</p><p>传统进程是程序执行流的最小单位，引入线程后，线程成为了程序执行流的<strong>最小单位</strong>，可以把线程理解为“轻量级进程”</p><p><strong>线程</strong>是一个<strong>基本的 CPU 执行单元</strong>，也是程序执行流的最小单位。引入线程之后，不仅是进程之间可以并发，进程内的<strong>各线程之间也可以并发</strong>，从而进一步<strong>提升了系统的并发度</strong>，使得一个进程内也可以并发处理各种任务（如 QQ 视频、文字聊天、传文件等）</p><p>引入线程后，<strong>进程只作为除 CPU 之外的系统资源的分配单元</strong>（如打印机、内存地址空间等都是分配给进程的）</p><h2 id="引入线程后与之前的区别" tabindex="-1"><a class="header-anchor" href="#引入线程后与之前的区别"><span>引入线程后与之前的区别</span></a></h2><table><thead><tr><th style="text-align:center;">对比点</th><th style="text-align:center;">进程</th><th style="text-align:center;">线程</th></tr></thead><tbody><tr><td style="text-align:center;">资源分配、调度</td><td style="text-align:center;">进程是资源分配、调度的基本单位</td><td style="text-align:center;">进程是资源分配的基本单位，线程是调度的基本单位</td></tr><tr><td style="text-align:center;">并发性</td><td style="text-align:center;">只能进程间并发</td><td style="text-align:center;">各线程间也能并发，提升了并发度</td></tr><tr><td style="text-align:center;">系统开销</td><td style="text-align:center;">进程间并发，需要切换进程的运行环境，系统开销很大</td><td style="text-align:center;">线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小，引入线程后，并发所带来的系统开销减小</td></tr></tbody></table><h2 id="线程的属性" tabindex="-1"><a class="header-anchor" href="#线程的属性"><span>线程的属性</span></a></h2><ol><li>线程是处理机调度的单位</li><li>多 CPU 计算机中，各个线程可占用不同的 CPU （可以是同一个 CPU 的不同核心，也可以是不同的 CPU ）</li><li>每个线程都有一个线程 ID 、线程控制块（ TCB ）</li><li>线程也有就绪、阻塞、运行三种基本状态</li><li>线程几乎不拥有系统资源</li><li>同一进程的不同线程间共享进程的资源</li><li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预</li><li>同一进程中的线程切换，不会引起进程切换</li><li>不同进程中的线程切换，会引起进程切换</li><li>切换同进程内的线程，系统开销很小</li><li>切换进程，系统开销较大</li></ol><h2 id="线程的实现方式" tabindex="-1"><a class="header-anchor" href="#线程的实现方式"><span>线程的实现方式</span></a></h2><p>线程主要有两种实现方式：用户级线程（ User-Level Thread ， ULT ）和内核级线程（ Kernel-Level Thread ， KLT 又称“内核支持的线程”）</p><h3 id="用户级线程" tabindex="-1"><a class="header-anchor" href="#用户级线程"><span>用户级线程</span></a></h3><p>历史背景：早期的操作系统（如：早期 Unix ）只支持进程不支持线程。当时的“线程”是由线程库实现的</p><p>很多编程语言提供了强大的线程库，可以实现线程的创建、销毁、调度等功能。</p><ul><li>线程的管理工作由谁来完成？</li></ul><p>用户级线程由应用程序通过线程库实现，<strong id="blue-msg">所有的线程管理工作都由应用程序负责</strong>（包括线程切换）</p><ul><li>线程切换是否需要 CPU 变换状态？</li></ul><p>用户级线程中，<strong id="blue-msg">线程切换可以在用户态下即可完成</strong>，无需操作系统干预</p><ul><li>操作系统是否能意识到用户级线程的存在？</li></ul><p>在用户看来，是有多个线程。但是在操作系统内核看来，并意识不到线程的存在。<strong id="blue-msg">“用户级线程”就是“从用户视角看能看到的线程”</strong></p><ul><li><p>这种线程的实现方式有什么优点和缺点？</p><ul><li><p>优点<br> 用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高</p></li><li><p>缺点<br> 当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高<br> 多个线程不可在多核处理机上并行运行</p></li></ul></li></ul><h3 id="内核级线程" tabindex="-1"><a class="header-anchor" href="#内核级线程"><span>内核级线程</span></a></h3><p>由操作系统支持的线程，大多数现代操作系统都实现了内核级线程，如 Windows 、 Linux 等</p><ul><li>线程的管理工作由谁来完成？</li></ul><p><strong id="blue-msg">内核级线程的管理工作由操作系统内核完成</strong></p><ul><li>线程切换是否需要 CPU 切换状态？</li></ul><p>线程调度、切换等工作都由内核负责，因此<strong id="blue-msg">内核级线程的切换必然需要在核心态</strong>下才能完成</p><ul><li>操作系统是否能意识到内核级线程的存在？</li></ul><p>操作系统会为每个内核级线程建立相应的 TCB （ ThreadControlBlock ，线程控制块）通过 TCB 对线程进行管理。<strong id="blue-msg">“内核级线程”就是“从操作系统内核视角看能看到的线程”</strong></p><ul><li><p>这种线程的实现方式有什么优点和缺点？</p><ul><li><p>优点<br> 当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行</p></li><li><p>缺点<br> 一个用户进程会占用多个内核级线程线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高，开销大</p></li></ul></li></ul><h2 id="多线程模型" tabindex="-1"><a class="header-anchor" href="#多线程模型"><span>多线程模型</span></a></h2><p>为了结合两种线程的优点，引入了多线程模型</p><p>在支持内核级线程的系统中，根据用户级线程和内核级线程的映射关系，可以划分为几种多线程模型</p><h3 id="一对一模型" tabindex="-1"><a class="header-anchor" href="#一对一模型"><span>一对一模型</span></a></h3><p>一个用户级线程映射到一个内核级线程<br> 每个用户进程有与用户级线程同数量的内核级线程</p><ul><li>优点</li></ul><p>当一个线程被阻塞后，别的线程还可以继续执行，并发能力强<br> 多线程可在多核处理机上并行执行</p><ul><li>缺点</li></ul><p>一个用户进程会占用多个内核级线程线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高，开销大</p>',40)),a(i)]))}},d=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/Thread.html","title":"线程","lang":"zh-CN","frontmatter":{"title":"线程","date":"2025-08-20T00:00:00.000Z","icon":"gears","order":12,"category":["408","操作系统","考研"],"description":"线程的概念 在没引入线程的概念之前，所有应用只能串行运行 有的进程可能需要“同时”做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了“线程”，来增加并发度。 传统进程是程序执行流的最小单位，引入线程后，线程成为了程序执行流的最小单位，可以把线程理解为“轻量级进程” 线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。引入线程之后，不...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-21T12:02:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/Thread.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程的概念 在没引入线程的概念之前，所有应用只能串行运行 有的进程可能需要“同时”做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了“线程”，来增加并发度。 传统进程是程序执行流的最小单位，引入线程后，线程成为了程序执行流的最小单位，可以把线程理解为“轻量级进程” 线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。引入线程之后，不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-21T12:02:01.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-21T12:02:01.000Z"}]]},"git":{"createdTime":1755684230000,"updatedTime":1755777721000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":2,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":5.24,"words":1571},"filePathRelative":"art/learning/master/major/OperatingSystem/Thread.md","excerpt":"<h2>线程的概念</h2>\\n<p>在没引入线程的概念之前，所有应用只能串行运行</p>\\n<p>有的进程可能需要“同时”做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了“线程”，来增加并发度。</p>\\n<p>传统进程是程序执行流的最小单位，引入线程后，线程成为了程序执行流的<strong>最小单位</strong>，可以把线程理解为“轻量级进程”</p>\\n<p><strong>线程</strong>是一个<strong>基本的 CPU 执行单元</strong>，也是程序执行流的最小单位。引入线程之后，不仅是进程之间可以并发，进程内的<strong>各线程之间也可以并发</strong>，从而进一步<strong>提升了系统的并发度</strong>，使得一个进程内也可以并发处理各种任务（如 QQ 视频、文字聊天、传文件等）</p>","autoDesc":true}');export{o as comp,d as data};
