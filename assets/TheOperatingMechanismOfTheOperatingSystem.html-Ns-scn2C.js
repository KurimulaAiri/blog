import{_ as e,c as o,b as s,a as n,d as p,w as a,e as i,r as g,o as l}from"./app-DQAg9y2R.js";const m={},c={class:"hint-container tip"},h={class:"hint-container-title"};function d(u,t){const r=g("RouteLink");return l(),o("div",null,[t[2]||(t[2]=s('<h2 id="程序是如何运行的" tabindex="-1"><a class="header-anchor" href="#程序是如何运行的"><span>程序是如何运行的？</span></a></h2><p>一条高级语言的代码翻译过来可能会对应多条机器指令（二进制）</p><p>一般来说高级语言通过编译，翻译成汇编语言，再通过汇编语言翻译成机器指令</p><p>程序运行的过程其实就是 CPU 执行一条一条的机器指令的过程</p><p>“指令”就是处理器（ CPU ）能识别、执行的最基本命令，而不是命令行中输入的命令</p><h2 id="内核程序和应用程序" tabindex="-1"><a class="header-anchor" href="#内核程序和应用程序"><span>内核程序和应用程序</span></a></h2><p>普通程序员编写的程序叫做<strong>应用程序</strong>，他是运行在操作系统之上的</p><p>编写操作系统的程序员编写的程序叫做<strong>内核程序</strong>，由大量内核程序组成了“<strong>操作系统内核</strong>”，简称为“<strong>内核</strong>”</p><p><strong>内核</strong>是操作系统最重要最核心的部分，也是<strong>最接近硬件的部分</strong></p><p>操作系统只需要有内核即可正常运行，但操作系统的部分功能未包含在内核中，比如图形化用户界面 GUI</p><h2 id="特权指令和非特权指令" tabindex="-1"><a class="header-anchor" href="#特权指令和非特权指令"><span>特权指令和非特权指令</span></a></h2><p>操作系统内核作为“管理者”有时会让 CPU 执行一些“特权指令”，如：内存清零指令。这些指令影响重大，只允许“管理者”——即操作系统内核来使用</p><p>应用程序只能使用“非特权指令”，如：加法指令、减法指令等</p><p><strong>在 CPU 设计和生产的时候就划分了特权指令和非特权指令</strong>，因此 CPU 执行一条指令前就能判断出其类型</p><h2 id="内核态和用户态" tabindex="-1"><a class="header-anchor" href="#内核态和用户态"><span>内核态和用户态</span></a></h2><p>为了使 CPU 能够区分正在运行的指令属于应用程序还是内核程序，CPU 设计了两种不同的工作状态：<strong>内核态</strong>和<strong>用户态</strong></p><p>CPU 中有一个寄存器叫程序状态字寄存器，简称 PSW ，其中有一个二进制位，其处于 <strong>1</strong> 时表示<strong>内核态</strong>；处于 <strong>0</strong> 时表示<strong>用户态</strong>，不同 CPU 可能表示的位数和二进制数有所不同</p><p>当 CPU 处于<strong>内核态</strong>时，说明此时运行的是<strong>内核程序</strong>，CPU 可以执行所有指令，包括<strong>特权指令和非特权指令</strong></p><p>当 CPU 处于<strong>用户态</strong>时，说明此时运行的是<strong>应用程序</strong>，CPU 只能执行<strong>非特权指令</strong></p><p>这两种状态还有别名：内核态（<strong>管态</strong>）和用户态（<strong>目态</strong>）</p><h3 id="两种状态的切换" tabindex="-1"><a class="header-anchor" href="#两种状态的切换"><span>两种状态的切换 👍</span></a></h3><ul><li><strong>假设从开机开始的过程：</strong></li></ul><ol><li><p>刚开机时， CPU 为“内核态”，操作系统内核程序先上 CPU 运行</p></li><li><p>开机完成后，用户可以启动某个应用程序</p></li><li><p>操作系统内核程序在合适的时候主动让出 CPU ，让该应用程序上 CPU 运行</p></li></ol><div class="hint-container tip"><p class="hint-container-title">切换</p><p>操作系统内核在让出 CPU 之前，会用一条特权指令把 PSW 的标志位设置为“用户态”</p></div><ol start="4"><li><p>应用程序运行在“用户态”</p></li><li><p>此时如果向 CPU 输入一条特权指令</p></li><li><p>CPU 发现接下来要执行的这条指令是特权指令，但是自己又处于“用户态”</p></li><li><p>这个非法事件会引发一个<strong>中断信号</strong></p></li><li><p>CPU <strong>检测到中断信号后</strong>，会立即<strong>变为“核心态”</strong>，并停止运行当前的应用程序，转而运行处理中断信号的内核程序</p></li><li><p>“中断”使操作系统再次夺回 CPU 的控制权</p></li><li><p>操作系统会对引发中断的事件进行处理，处理完了再把CPU使用权交给别的应用程序</p></li></ol><p><strong>内核态→用户态</strong>：执行一条<strong>特权指令</strong>——<strong>修改PSW的标志位为“用户态”</strong>，这个动作意味着操作系统将主动让出 CPU 使用权</p><p><strong>用户态→内核态</strong>：由“<strong>中断</strong>”引发，<strong>硬件自动完成变态过程</strong>，触发中断信号意味着操作系统将强行夺回 CPU 的使用权</p>',27)),n("div",c,[n("p",h,[p(r,{to:"/art/learning/master/major/OperatingSystem/InterruptionsAndExceptions.html"},{default:a(()=>t[0]||(t[0]=[n("strong",null,"中断",-1)])),_:1})]),t[1]||(t[1]=n("p",null,[i("除了非法使用特权指令之外、还有很多事件会触发中断信号。一个共性是，"),n("strong",null,"但凡需要操作系统介入的地方，都会触发中断信号")],-1))])])}const C=e(m,[["render",d]]),U=JSON.parse('{"path":"/art/learning/master/major/OperatingSystem/TheOperatingMechanismOfTheOperatingSystem.html","title":"操作系统的运行机制","lang":"zh-CN","frontmatter":{"title":"操作系统的运行机制","date":"2025-08-15T00:00:00.000Z","icon":"gears","order":4,"category":["408","操作系统","考研"],"description":"程序是如何运行的？ 一条高级语言的代码翻译过来可能会对应多条机器指令（二进制） 一般来说高级语言通过编译，翻译成汇编语言，再通过汇编语言翻译成机器指令 程序运行的过程其实就是 CPU 执行一条一条的机器指令的过程 “指令”就是处理器（ CPU ）能识别、执行的最基本命令，而不是命令行中输入的命令 内核程序和应用程序 普通程序员编写的程序叫做应用程序，他...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统的运行机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-15T10:25:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/OperatingSystem/TheOperatingMechanismOfTheOperatingSystem.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"操作系统的运行机制"}],["meta",{"property":"og:description","content":"程序是如何运行的？ 一条高级语言的代码翻译过来可能会对应多条机器指令（二进制） 一般来说高级语言通过编译，翻译成汇编语言，再通过汇编语言翻译成机器指令 程序运行的过程其实就是 CPU 执行一条一条的机器指令的过程 “指令”就是处理器（ CPU ）能识别、执行的最基本命令，而不是命令行中输入的命令 内核程序和应用程序 普通程序员编写的程序叫做应用程序，他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-15T10:25:25.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-15T10:25:25.000Z"}]]},"git":{"createdTime":1755253525000,"updatedTime":1755253525000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":1,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":3.6,"words":1079},"filePathRelative":"art/learning/master/major/OperatingSystem/TheOperatingMechanismOfTheOperatingSystem.md","excerpt":"<h2>程序是如何运行的？</h2>\\n<p>一条高级语言的代码翻译过来可能会对应多条机器指令（二进制）</p>\\n<p>一般来说高级语言通过编译，翻译成汇编语言，再通过汇编语言翻译成机器指令</p>\\n<p>程序运行的过程其实就是 CPU 执行一条一条的机器指令的过程</p>\\n<p>“指令”就是处理器（ CPU ）能识别、执行的最基本命令，而不是命令行中输入的命令</p>\\n<h2>内核程序和应用程序</h2>\\n<p>普通程序员编写的程序叫做<strong>应用程序</strong>，他是运行在操作系统之上的</p>\\n<p>编写操作系统的程序员编写的程序叫做<strong>内核程序</strong>，由大量内核程序组成了“<strong>操作系统内核</strong>”，简称为“<strong>内核</strong>”</p>","autoDesc":true}');export{C as comp,U as data};
