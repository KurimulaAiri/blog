import{_ as p,c as r,d as k,e,a as i,w as t,r as d,o as A,b as s}from"./app-B6_PIORM.js";const g={};function y(c,a){const h=d("Tabs");return A(),r("div",null,[a[12]||(a[12]=k(`<h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h2><h3 id="双链表" tabindex="-1"><a class="header-anchor" href="#双链表"><span>双链表</span></a></h3><h4 id="双链表的定义" tabindex="-1"><a class="header-anchor" href="#双链表的定义"><span>双链表的定义</span></a></h4><p>由于在单链表的使用中，对于某些操作需要取到元素的前驱，实现这个功能对于单链表来说非常麻烦，可能需要遍历整个表</p><p>因此，为了解决这个问题，双链表应运而生</p><p>双链表的结构为：数据域和前驱指针和后继指针</p><p>链表结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DNode { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prior, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">next;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} DNode, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DLinkList;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 这里和之前一样，都 Node 是为了强调节点，DLinkList 是为了强调双链表，是链表的指针</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="双链表的初始化" tabindex="-1"><a class="header-anchor" href="#双链表的初始化"><span>双链表的初始化</span></a></h4>`,9)),e(h,{data:[{id:"带头节点"},{id:"无头节点"}]},{title0:t(({value:l,isActive:n})=>a[0]||(a[0]=[s("带头节点")])),title1:t(({value:l,isActive:n})=>a[1]||(a[1]=[s("无头节点")])),tab0:t(({value:l,isActive:n})=>a[2]||(a[2]=[i("div",{class:"language-c line-numbers-mode","data-highlighter":"shiki","data-ext":"c",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InitDLinkList"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DLinkList "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"&"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"malloc"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"sizeof"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(DNode));"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 创建头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 内存分配失败")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 返回错误")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 头节点的 prior 为 NULL，且永远为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 头节点的 next 为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:t(({value:l,isActive:n})=>a[3]||(a[3]=[i("div",{class:"language-c line-numbers-mode","data-highlighter":"shiki","data-ext":"c",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InitDLinkList"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DLinkList "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"&"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") { ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),a[13]||(a[13]=k(`<h4 id="双链表判空" tabindex="-1"><a class="header-anchor" href="#双链表判空"><span>双链表判空</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DLinkList </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> L </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="双链表的插入" tabindex="-1"><a class="header-anchor" href="#双链表的插入"><span>双链表的插入</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在p节点之后插入s节点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> InsertNextDNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> DNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // p 和 s 不能为 NULL</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s 的后继为 p 的后继</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果 p 的后继不为 NULL，就修改p的后继的前驱为 s</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prior</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //  p 的后继的前驱为 s</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prior</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s 的前驱为 p</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // p 的后继为 s</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="双链表的删除" tabindex="-1"><a class="header-anchor" href="#双链表的删除"><span>双链表的删除</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 删除 p 节点之后的节点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DeleteNextDNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // p 不能为 NULL</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // q 为 p 的后继</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (q </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果 q 为 NULL，说明 p 为最后一个节点，无法删除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // p 的后继为 q 的后继</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果 q 的后继不为 NULL，就修改 q 的后继的前驱为 p</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prior</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // q 的后继的前驱为 p</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    free</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(q);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 释放 q</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="双链表的遍历" tabindex="-1"><a class="header-anchor" href="#双链表的遍历"><span>双链表的遍历</span></a></h4><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用循环遍历双链表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 后向遍历</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理 p 节点的位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 前向遍历</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理 p 节点的位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prior</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 前向遍历（跳过头节点）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prior </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理 p 节点的位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prior</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>对于按位查找，只需要添加一个计数器，双链表和单链表一样，都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的时间复杂度</p><p>由于链表不具备随机访问的特性，查找操作只能从一端顺序遍历</p><h3 id="循环链表" tabindex="-1"><a class="header-anchor" href="#循环链表"><span>循环链表</span></a></h3><p>循环链表的定义：</p>`,12)),e(h,{data:[{id:"循环单链表"},{id:"循环双链表"}]},{title0:t(({value:l,isActive:n})=>a[4]||(a[4]=[s("循环单链表")])),title1:t(({value:l,isActive:n})=>a[5]||(a[5]=[s("循环双链表")])),tab0:t(({value:l,isActive:n})=>a[6]||(a[6]=[i("div",{class:"language-c line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"c",style:{"--vp-collapsed-lines":"15","--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"typedef"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," struct"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," LNode {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ElemType data;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    struct"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," LNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"next;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"} LNode, "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"LinkList;")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 初始化一个循环单链表")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InitList"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"LinkList "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"&"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (LNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"malloc"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"sizeof"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(LNode));"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 创建头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 内存分配失败")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 返回错误")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 头结点的 next 指向头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 判空操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Empty"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"LinkList "),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," =="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})]),i("div",{class:"collapsed-lines"})],-1),i("p",null,"对于经常需要对头尾节点进行操作的情况，可以使用带头节点和尾指针的循环单链表进行实现",-1)])),tab1:t(({value:l,isActive:n})=>a[7]||(a[7]=[i("div",{class:"language-c line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"c",style:{"--vp-collapsed-lines":"15","--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 循环双链表")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"typedef"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," struct"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," DNode {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ElemType data;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    struct"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"prior, "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"next;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"} DNode, "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"DLinkList;")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 初始化一个循环双链表")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InitList"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DLinkList "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"&"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"malloc"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"sizeof"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(DNode));"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 创建头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 内存分配失败")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 返回错误")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 头结点的 prior 指向头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 头结点的 next 指向头结点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 判空操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Empty"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DLinkList "),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," =="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#56B6C2"}},"&&"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," L"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," =="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," L;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})]),i("div",{class:"collapsed-lines"})],-1)])),_:1}),a[14]||(a[14]=i("p",null,"对于双链表和循环单链表，由于尾指针的存在，可以方便的进行尾插和尾删操作",-1)),e(h,{data:[{id:"双链表"},{id:"循环双链表"}]},{title0:t(({value:l,isActive:n})=>a[8]||(a[8]=[s("双链表")])),title1:t(({value:l,isActive:n})=>a[9]||(a[9]=[s("循环双链表")])),tab0:t(({value:l,isActive:n})=>a[10]||(a[10]=[i("div",{class:"language-c line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"c",style:{"--vp-collapsed-lines":"15","--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro has-highlighted vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 插入操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InsertNextDNode"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},","),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (p "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#56B6C2"}}," ||"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 和 s 不能为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // s 的 next 指向 p 的后继")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," !="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 如果 p 的后继不为 NULL，就修改 p 的后继的前驱为 s")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继的前驱为 s")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," p;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // s 的前驱为 p")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继为 s")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 删除操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," DeleteNextDNode"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (p "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 不能为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"q "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // q 为 p 的后继")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (q "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 如果 q 为 NULL，说明 p 无后继，直接返回")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," q"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继为 q 的后继")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"q"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," !="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 如果 q 的后继不为 NULL，就修改 q 的后继的前驱为 p")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        q"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," p;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // q 的后继的前驱为 p")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    free"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(q);"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 释放 q")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})]),i("div",{class:"collapsed-lines"})],-1),i("p",null,"对于双链表操作，很多时候需要判断当前节点是否为末尾，针对尾节点需要特殊操作",-1)])),tab1:t(({value:l,isActive:n})=>a[11]||(a[11]=[i("div",{class:"language-c line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"c",style:{"--vp-collapsed-lines":"15","--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro has-highlighted vp-code"},[i("code",{class:"language-c"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 插入操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," InsertNextDNode"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},","),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (p "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#56B6C2"}}," ||"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 和 s 不能为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // s 的 next 指向 p 的后继")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继的前驱为 s 这里在循环双链表中就不需要考虑在末尾的情况")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    s"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," p;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // s 的前驱为 p")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," s;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继为 s")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 删除操作")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," DeleteNextDNode"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}},"p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    if"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," (p "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"=="),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," NULL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 不能为 NULL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," false"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    DNode "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"*"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"q "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // q 为 p 的后继")]),s(`
`),i("span",{class:"line highlighted warning"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    p"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," q"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // p 的后继为 q 的后继，同样的在循环双链表中就不需要考虑在末尾的情况")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"    q"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"next"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prior"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," p;"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // q 的后继的前驱为 p")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    free"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(q);"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 释放 q")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    return"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})]),i("div",{class:"collapsed-lines"})],-1)])),_:1}),a[15]||(a[15]=k(`<h3 id="静态链表-考的不多" tabindex="-1"><a class="header-anchor" href="#静态链表-考的不多"><span>静态链表 （考的不多）</span></a></h3><h4 id="静态链表的定义" tabindex="-1"><a class="header-anchor" href="#静态链表的定义"><span>静态链表的定义</span></a></h4><p>静态链表是借助数组来描述线性表的链式存储结构，因此静态链表需要预先分配一块<strong>连续</strong>的内存空间，静态链表中的元素是结点，每个结点由两个数据域组成，一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域（称为<strong>数组下标</strong>，从 0 开始，也可以称为游标） ，静态链表中的第一个结点存储在数组下标为 0 的位置，称为<strong>头结点</strong>，头节点不存储数据，只有一个指向下一个元素的指针域，最后一个结点存储在数组下标为 maxsize - 1 的位置，称为<strong>尾结点</strong>，尾结点的指针域为 -1 ，静态链表中不存在头指针和尾指针，因为静态链表中的元素是结点，而结点是由两个数据域组成的，因此静态链表中的元素个数就是数组的长度，即 maxsize</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxsize</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 定义数组长度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ElemType data;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 数据域</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cur;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 游标，存储下一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} Node, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">StaticLinkList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[maxsize];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 这里需要注意的是，静态链表中的结点类型是 Node，而静态链表类型是 StaticLinkList，即静态链表类型是静态链表数组，数组中的每个元素都是一个结点</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用时定义一个 StaticLinkList list; ，等价于 Struct Node list[maxsize];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态链表的初始化" tabindex="-1"><a class="header-anchor" href="#静态链表的初始化"><span>静态链表的初始化</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始化静态链表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> InitList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StaticLinkList </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将所有结点的游标都初始化为 i + 1 认为所有的节点的下一节点下标为 i + 1 的结点均为空闲结点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 尾结点的游标为 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态链表的查找操作" tabindex="-1"><a class="header-anchor" href="#静态链表的查找操作"><span>静态链表的查找操作</span></a></h4><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 静态链表的查找操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LocateElem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StaticLinkList </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ElemType </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i 为第一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 从第一个结点开始遍历，直到找到元素或者遍历到尾结点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 按逻辑位次查找，返回节点逻辑位置的下标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetElem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StaticLinkList </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i 不合法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // j 为第一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i; k</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 从第一个结点开始遍历，直到找到第 i 个结点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="静态链表的插入操作" tabindex="-1"><a class="header-anchor" href="#静态链表的插入操作"><span>静态链表的插入操作</span></a></h4><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 静态链表的插入操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ListInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StaticLinkList </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ElemType </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i 不合法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // j 为最后一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 从最后一个结点开始遍历，直到找到元素或者遍历到头结点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 找到元素，直接返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k 为第一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[k].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第一个结点的游标指向第 i 个结点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[k].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第 i 个结点的游标指向第 k 个结点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第 i 个结点的值修改为 e</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第 i 个结点的游标指向第 j 个结点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="静态链表的删除操作" tabindex="-1"><a class="header-anchor" href="#静态链表的删除操作"><span>静态链表的删除操作</span></a></h4><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 静态链表的删除操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ListDelete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StaticLinkList </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i 不合法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // j 为最后一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 从最后一个结点开始遍历，直到找到第 i 个结点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 没有找到第 i 个结点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k 为第一个结点的下标</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[k].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第一个结点的游标指向第 i 个结点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[k].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第 i 个结点的游标指向第 k 个结点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将第 j 个结点的游标指向第 j 个结点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="静态链表的优缺点" tabindex="-1"><a class="header-anchor" href="#静态链表的优缺点"><span>静态链表的优缺点</span></a></h4><p>优点：</p><ul><li>增删操作只需要修改游标，不需要移动元素，从而改进了顺序存储结构中插入和删除操作需要移动大量元素的缺点<br> 缺点：</li><li>不能随机访问，需要遍历链表才能找到第 i 个元素</li><li>容量固定，不能动态增加存储空间</li></ul><p>适用场景：</p><ol><li>不支持指针的低级语言</li><li>数据元素数量固定不变的场景（如操作系统中的文件分配表FAT）</li></ol><h2 id="顺序表和链表的对比" tabindex="-1"><a class="header-anchor" href="#顺序表和链表的对比"><span>顺序表和链表的对比</span></a></h2><p>将从三大方面进行比较：逻辑结构、物理结构（存储结构）和数据的运算 / 基本操作</p><h3 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构"><span>逻辑结构</span></a></h3><p>顺序表和链表都是线性结构，即逻辑结构都是线性的</p><h3 id="物理结构-存储结构" tabindex="-1"><a class="header-anchor" href="#物理结构-存储结构"><span>物理结构（存储结构）</span></a></h3><p>顺序表：顺序存储结构，用一段连续的存储单元依次存储线性表的数据元素</p><p>链表：链式存储结构，用一组任意的存储单元存储线性表的数据元素（存储单元可以是连续的，也可以是不连续的）</p><p>由于结构不同，两者各有其优缺点</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">顺序表</th><th style="text-align:center;">链表</th></tr></thead><tbody><tr><td style="text-align:center;">存储空间</td><td style="text-align:center;">连续的</td><td style="text-align:center;">不一定连续</td></tr><tr><td style="text-align:center;">存储密度</td><td style="text-align:center;">大</td><td style="text-align:center;">小</td></tr><tr><td style="text-align:center;">插入和删除</td><td style="text-align:center;">需要移动大量元素</td><td style="text-align:center;">不需要移动元素</td></tr><tr><td style="text-align:center;">逻辑顺序和物理顺序是否一致</td><td style="text-align:center;">一致</td><td style="text-align:center;">不一致</td></tr><tr><td style="text-align:center;">适用场景</td><td style="text-align:center;">适合元素个数已知且连续的场景</td><td style="text-align:center;">适合元素个数未知且不连续的场景</td></tr><tr><td style="text-align:center;">优点</td><td style="text-align:center;">支持随机存取、存储密度高</td><td style="text-align:center;">离散的小空间，分配方便 ，可以动态增加存储空间</td></tr><tr><td style="text-align:center;">缺点</td><td style="text-align:center;">插入和删除需要移动大量元素，效率低，更改容量不方便，占用大片连续空间</td><td style="text-align:center;">不支持随机存取，查找效率低，存储密度低</td></tr></tbody></table><h3 id="数据的运算-基本操作" tabindex="-1"><a class="header-anchor" href="#数据的运算-基本操作"><span>数据的运算 / 基本操作</span></a></h3><p>主要分为六点：<strong>创</strong>、销、<strong>查</strong>、改、<strong>增</strong>、<strong>删</strong></p><p>各操作时间复杂度</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">顺序表</th><th style="text-align:center;">链表</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">创建</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">销毁</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（静态声明） 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（动态声明）</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">查找</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（按位查找） 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（按值查找）</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;">顺序表的按值查找在采用特定算法时时间复杂度可以优化到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center;">修改</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">增加</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;">这里需要注意的是，虽然顺序表和链表都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，但是顺序表的时间复杂度主要取决于元素的移动，会根据元素占用空间大小而有所不同；链表的时间复杂度主要取决于指针的移动，与元素占用空间大小无关，因此在增加时链表的效率总体还是优于顺序表的</td></tr><tr><td style="text-align:center;">删除</td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center;"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（按值或按位） 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（按节点指针）</td><td style="text-align:center;">删除操作同增加操作一样</td></tr></tbody></table><p>选择两者中的哪一个，需要根据实际场景进行选择</p><table><thead><tr><th style="text-align:center;">场景</th><th style="text-align:center;">顺序表</th><th style="text-align:center;">链表</th></tr></thead><tbody><tr><td style="text-align:center;">元素个数已知且连续</td><td style="text-align:center;">适合</td><td style="text-align:center;">不适合</td></tr><tr><td style="text-align:center;">元素个数未知且不连续</td><td style="text-align:center;">不适合</td><td style="text-align:center;">适合</td></tr><tr><td style="text-align:center;">插入和删除操作较多</td><td style="text-align:center;">不适合</td><td style="text-align:center;">适合</td></tr><tr><td style="text-align:center;">查找操作较多</td><td style="text-align:center;">适合</td><td style="text-align:center;">不适合</td></tr></tbody></table><h2 id="关于一些答题技巧" tabindex="-1"><a class="header-anchor" href="#关于一些答题技巧"><span>关于一些答题技巧</span></a></h2><p>能够从逻辑结构、物理结构、算法 / 基本操作三个方面进行比较分析</p><p>两者逻辑结构上都是线性表</p><p>但由于二者物理结构不同，前者属于顺序存储（特点，所带来的优缺点）；链表采用链式存储（特点、优缺点）</p><p>因为采用不同的物理结构，所以二者在算法 / 基本操作上会有所不同，需要具体分析</p><p>对于初始化时、插入元素时、查找元素时、修改元素时、删除元素时，不同操作中的两者的不同特点来进行分析</p>`,38))])}const o=p(g,[["render",y]]),m=JSON.parse('{"path":"/art/learning/master/major/DataStructure/LinearList_2.html","title":"线性表下","lang":"zh-CN","frontmatter":{"title":"线性表下","date":"2025-04-29T00:00:00.000Z","icon":"database","order":4,"category":["数据结构","408","考研","线性表"],"tag":["c","c++"],"description":"链表 双链表 双链表的定义 由于在单链表的使用中，对于某些操作需要取到元素的前驱，实现这个功能对于单链表来说非常麻烦，可能需要遍历整个表 因此，为了解决这个问题，双链表应运而生 双链表的结构为：数据域和前驱指针和后继指针 链表结构如下： 双链表的初始化 双链表判空 双链表的插入 双链表的删除 双链表的遍历 对于按位查找，只需要添加一个计数器，双链表和单...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线性表下\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-14T15:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/DataStructure/LinearList_2.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"线性表下"}],["meta",{"property":"og:description","content":"链表 双链表 双链表的定义 由于在单链表的使用中，对于某些操作需要取到元素的前驱，实现这个功能对于单链表来说非常麻烦，可能需要遍历整个表 因此，为了解决这个问题，双链表应运而生 双链表的结构为：数据域和前驱指针和后继指针 链表结构如下： 双链表的初始化 双链表判空 双链表的插入 双链表的删除 双链表的遍历 对于按位查找，只需要添加一个计数器，双链表和单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T15:05:37.000Z"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:published_time","content":"2025-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-14T15:05:37.000Z"}]]},"git":{"createdTime":1745915589000,"updatedTime":1747235137000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":4,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":11.49,"words":3446},"filePathRelative":"art/learning/master/major/DataStructure/LinearList_2.md","excerpt":"<h2>链表</h2>\\n<h3>双链表</h3>\\n<h4>双链表的定义</h4>\\n<p>由于在单链表的使用中，对于某些操作需要取到元素的前驱，实现这个功能对于单链表来说非常麻烦，可能需要遍历整个表</p>\\n<p>因此，为了解决这个问题，双链表应运而生</p>\\n<p>双链表的结构为：数据域和前驱指针和后继指针</p>\\n<p>链表结构如下：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-c\\"><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">typedef</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> struct</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> DNode { </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> data;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    struct</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> DNode </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">prior, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">next;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">} DNode, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">DLinkList;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 这里和之前一样，都 Node 是为了强调节点，DLinkList 是为了强调双链表，是链表的指针</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,m as data};
