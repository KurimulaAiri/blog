import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o as p,a as t,F as c,f as g,t as i,d as n,b as m,e as a,w as d,r as y}from"./app-fViGDb0g.js";const P={name:"TcpTables",props:{tableData:{type:Object,default:()=>({receivedSegments:[],dataChanges:[],sentSegments:[]})}},data(){return{receivedSegments:[{field:"seq",value:610},{field:"ack",value:205},{field:"rwnd",value:5}],dataChanges:[{part:"接收窗口",change:"6 -> 0 -> 8"},{part:"发送窗口",change:"8 -> 5"}],sentSegments:[{field:"seq",value:205},{field:"ack",value:612},{field:"rwnd",value:8}]}}},C={class:"outer-container"},f={class:"table-wrapper"},T={class:"tcp-table"},b={class:"data-cell"},w={class:"data-cell"},k={class:"table-wrapper"},A={class:"tcp-table"},S={class:"data-cell"},B={class:"data-cell"},K={class:"table-wrapper"},M={class:"tcp-table"},U={class:"data-cell"},D={class:"data-cell"};function N(x,e,s,h,o,q){return p(),r("div",C,[t("div",f,[e[1]||(e[1]=t("div",{class:"table-caption"},"接收的 TCP 段字段",-1)),t("table",T,[e[0]||(e[0]=t("thead",null,[t("tr",{class:"header-row"},[t("th",{class:"table-header"},"字段"),t("th",{class:"table-header"},"内容")])],-1)),t("tbody",null,[(p(!0),r(c,null,g(s.tableData.receivedSegments,l=>(p(),r("tr",{class:"data-row",key:l.field},[t("td",b,i(l.field),1),t("td",w,i(l.value),1)]))),128))])])]),t("div",k,[e[3]||(e[3]=t("div",{class:"table-caption"},"各部分数据变化",-1)),t("table",A,[e[2]||(e[2]=t("thead",null,[t("tr",{class:"header-row"},[t("th",{class:"table-header"},"数据部分"),t("th",{class:"table-header"},"变化")])],-1)),t("tbody",null,[(p(!0),r(c,null,g(s.tableData.dataChanges,l=>(p(),r("tr",{class:"data-row",key:l.part},[t("td",S,i(l.part),1),t("td",B,i(l.change),1)]))),128))])])]),t("div",K,[e[5]||(e[5]=t("div",{class:"table-caption"},"发送的 TCP 段字段",-1)),t("table",M,[e[4]||(e[4]=t("thead",null,[t("tr",{class:"header-row"},[t("th",{class:"table-header"},"字段"),t("th",{class:"table-header"},"内容")])],-1)),t("tbody",null,[(p(!0),r(c,null,g(s.tableData.sentSegments,l=>(p(),r("tr",{class:"data-row",key:l.field},[t("td",U,i(l.field),1),t("td",D,i(l.value),1)]))),128))])])])])}const u=v(P,[["render",N],["__scopeId","data-v-2259d840"]]),I={class:"hint-container info"},_={id:"tcp-可靠传输和流量控制",tabindex:"-1"},E={class:"header-anchor",href:"#tcp-可靠传输和流量控制"},R={__name:"ServicesProvidedByTheTransportLayer.html",setup(x){return(e,s)=>{const h=y("MarkMap"),o=y("RouteLink");return p(),r("div",null,[s[14]||(s[14]=t("h2",{id:"传输层概述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#传输层概述"},[t("span",null,"传输层概述")])],-1)),n(h,{content:"eJyFVFtLG0EUfs+vGPBtIeC1UKFPLYVCH4S29FlsoEXFIlJKS2W9kMSYzUYbjbmZGBMNptnEVs2ai/kvds7M7lP+Qs/sJJvQVArLsjNzvu9855tz1uv1epbnVxeX5z/OeghZWFlaWX2+6vN98b30ffItzZJp3F2e//z2w7u197gaH/cIiGeM0FbOuvsOl5vsbNPq1HBrjPByFfRTntym7TSPlcTeGLHVpNUJ3KtpRZHnoNcV5V7NsFzAqvqp2WTphsCYKjUv+M4tGAhI8dKux+Ml7FeJbeseVEEIrqo66DUX4vKxoypt7POUKTZ3f/DyLn70Qa+fzpHf6gZ582yOULPAzzXQdMsw/iJAtOAYoIV4gWXBQwcrUcgkKyKK8mplYdG3RqAYZ5EiVOKKQp6Qr+QFxqZrkFFnXf5v3VYYYlWsEU9k4by9x5tpalZk7W5d1Ay5bkAjhj723RCCXEaMgaCfXzYdl9IahE4gUaLtDgKGK+u7gO77szxbdA/I+PrE+OSUosgIGYWlgWmCfmFttZGINiJWvtwDJrftgGadbUhRqAga7sXwRNMyagNuZJ5en348MTNBuq0gj9Sg/pOaGvg1ahZZrmVvXIMR7LZ2hHow8ixYR/DD6nm2wpKbA35BPbn+aGZmaua/CdA1CGWxIOkgGMcYLqiC4o1o6S8u5QeCRK1qknZOepCChrpgPywcF32Nmp0tBNNmBG8MwdQUyG4rCekS6Hu2usEOakwTbcbiN6AmRAtEw6NXDYUkXnVPhF6lzaL0QQbjkTtqsgOd9I6QfnqhHbnc9NiNLHYzmn5A5KRhoZCMYZVTfmLQRoE2j4QrKYEa7jqoG3YswU5Vdu1MpTMWzgoCDXkI0YiiUDMPrS1Jqiii4NsbNBK7p+fI4a2iYBehENF3XmeuRol46gpL+AcdNWNiVxvh7MmM7snmFL8lPUrvUnLe5XiIfHYmj0FW5xj5sUYcZrTCzuR6Ped0hHRJYtBhp1i09l6N4SN86mSGbRMcRpgdXAl9bT/+SaCl2jEVCufO0THaz9Rz624L63OGNZ4bFiC6Vmp4SIAwyRUgUyMCGxo9Q8McjjwULqUAW81C4ww6ZZFdKqnhnP4BR4WRVA=="}),s[15]||(s[15]=m('<p>两台主机的两个应用通过 <code>IP + 端口号</code>（套接字） 实现通信</p><p>套接字分为： TCP 套接字和 UDP 套接字</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>两台主机的端口号是相互独立的</p></li><li><p>TCP 、 UDP 的端口号也是相互独立的</p></li><li><p>当两个进程之间需要进行通信时，需要指明：</p><ol><li><p>使用哪种传输层协议</p></li><li><p>本进程绑定的端口号</p></li><li><p>对方 IP 地址和端口号</p></li></ol></li></ul></div><h3 id="熟知端口号" tabindex="-1"><a class="header-anchor" href="#熟知端口号"><span>熟知端口号</span></a></h3><p>0~1023 为熟知端口号，开发的时候一般不使用</p><p>其他端口号在实际开发时没有特别严格的限制，只要在本机没有被使用的端口号都可以使用</p><p>端口号分类只是一种“建议标准”，而非“强制标准”</p><div class="hint-container tip"><p class="hint-container-title">常见熟知端口号</p><table><thead><tr><th style="text-align:center;">应用程序</th><th style="text-align:center;">FTP</th><th style="text-align:center;">TELNET</th><th style="text-align:center;">SMTP</th><th style="text-align:center;">DNS</th><th style="text-align:center;">TFTP</th><th style="text-align:center;">HTTP</th><th style="text-align:center;">SNMP</th></tr></thead><tbody><tr><td style="text-align:center;">端口号</td><td style="text-align:center;">21</td><td style="text-align:center;">23</td><td style="text-align:center;">25</td><td style="text-align:center;">53</td><td style="text-align:center;">69</td><td style="text-align:center;">80</td><td style="text-align:center;">161</td></tr></tbody></table></div><h3 id="有连接和无连接" tabindex="-1"><a class="header-anchor" href="#有连接和无连接"><span>有连接和无连接</span></a></h3><p>有连接：在传输数据前先打招呼，先确认对方已经准备好接收数据。传输结束时也要告知对方已结束</p><p>无连接：不打招呼，直接把数据传给对方</p><h3 id="可靠传输和不可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输和不可靠传输"><span>可靠传输和不可靠传输</span></a></h3><p>可靠传输：接收方使用“确认机制”让发送方知道哪些数据已经被正确接收</p><p>不可靠的：接收方无论收没收到数据、数据是否正确，都不给发送方反馈</p><h2 id="udp-协议" tabindex="-1"><a class="header-anchor" href="#udp-协议"><span>UDP 协议</span></a></h2><h3 id="udp-数据报" tabindex="-1"><a class="header-anchor" href="#udp-数据报"><span>UDP 数据报</span></a></h3><p>传输层收到应用层的数据后会在其首部添加一个 8 B 大小的 UDP 首部</p><p>UDP 数据报有以下特点</p><ul><li><p>UDP 首部很小只占 8 B</p></li><li><p>UDP 每次传输一个完整的报文，不支持报文自动拆分、重装</p></li><li><p>UDP 是无连接的、不可靠的（可靠性可以交给应用层处理），也不支持拥塞控制</p></li><li><p>UDP 支持一对一（封装成单播 IP 数据报）、一对多传输（封装成广播 / 多播 IP 数据报）</p></li></ul><figure><img src="//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg" alt="UDP 数据报格式" tabindex="0" loading="lazy"><figcaption>UDP 数据报格式</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>由于 UDP 不支持报文拆分和重装，因此应用层的报文长度不能超过 UDP 协议上限</li></ul><p>UDP 数据报中，首部固定占 8 B</p><p>首部各字段及其作用：</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">源端口号</td><td style="text-align:center;">发送进程的端口号（如果不需要对方回复可以全设置为 0 ）</td></tr><tr><td style="text-align:center;">目的端口号</td><td style="text-align:center;">接收进程的端口号（必填）</td></tr><tr><td style="text-align:center;">UDP 长度</td><td style="text-align:center;">包含首部，以“字节”为单位</td></tr><tr><td style="text-align:center;">UDP 检验和</td><td style="text-align:center;">由发送方的传输计算并填入校验和，接收方的传输层检测是否有差错（如果无需校验，可以填入全 0 ）</td></tr></tbody></table><p>数据部分为一个完整的应用层报文</p><p>UDP 数据报理论最大长度为 <strong>65535 B</strong> （ 64 Kb ）这是由 <strong>IP 数据报数据部分长度限制</strong>（ IP 数据报数据部分最长为 65535 B ）所限制的</p></div><h3 id="udp-检验" tabindex="-1"><a class="header-anchor" href="#udp-检验"><span>UDP 检验</span></a></h3><figure><img src="//store.s1r0ko.top/svg/m/cn/24/2_ver_2.svg" alt="UDP 检验过程格式" tabindex="0" loading="lazy"><figcaption>UDP 检验过程格式</figcaption></figure><p>对于<strong id="blue-msg">发送方</strong>，会在交付给网络层之前进行<strong>检验和计算</strong>，并将结果填入 UDP 首部的检验和字段中，具体步骤如下</p><ol><li><p>传输层 UDP 协议在计算检验和之前，先添加一个伪首部</p></li><li><p>把伪首部、首部、数据部分以 16 bit 为一组，进行<a href="text.com">二进制加法</a>（最高位产生的进位需要回卷）</p></li><li><p>将最终的加法结果逐位取反，就得到 16 bit 的检验和，将其填入 UDP 首部</p></li><li><p>去掉伪首部，并将 UDP 数据报交给网络层，封装成 IP 数据报</p></li></ol><p>对于<strong id="blue-msg">接收方</strong>收到数据后也会有相似的操作</p>',26)),t("ol",null,[s[3]||(s[3]=t("li",null,[t("p",null,"网络层向传输层递交 UDP 数据报")],-1)),s[4]||(s[4]=t("li",null,[t("p",null,"传输层在 UDP 数据报之前，添加伪首部")],-1)),t("li",null,[t("p",null,[s[1]||(s[1]=a("吧伪首部、 UDP 首部、数据部分以 16 bit 为一组，进行")),n(o,{to:"/art/learning/master/major/ComputerNetworks/test.html"},{default:d(()=>s[0]||(s[0]=[a("二进制加法")])),_:1}),s[2]||(s[2]=a("（最高位的进位需要回卷）"))])]),s[5]||(s[5]=t("li",null,[t("p",null,"如果加法结果全为 1 ，说明没有比特错误，于是接收该 UDP 数据报，并根据目的端口号，向应用层递交报文；如果加法结果不全为 1 ，说明有差错，于是丢弃该 UDP 数据报")],-1))]),s[16]||(s[16]=t("ul",null,[t("li",null,[t("strong",null,"二进制计算过程")])],-1)),s[17]||(s[17]=t("p",null,"假设有 48 bit 数据为：",-1)),s[18]||(s[18]=t("p",{class:"katex-block"},[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mspace",{linebreak:"newline"}),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0001"),t("mspace",{linebreak:"newline"}),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"1100"),t("mtext",null," "),t("mn",null,"0101"),t("mspace",{linebreak:"newline"})]),t("annotation",{encoding:"application/x-tex"}," 0101\\ 0000\\ 0110\\ 0101 \\\\ 0110\\ 1001\\ 0101\\ 0001 \\\\ 0110\\ 0101\\ 1100\\ 0101 \\\\ ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")]),t("span",{class:"mspace newline"})])])])],-1)),s[19]||(s[19]=t("p",null,"计算过程为：",-1)),s[20]||(s[20]=t("p",{class:"katex-block"},[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},[t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("munder",{accentunder:"true"},[t("mrow",null,[t("mo",null,"+"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0001")]),t("mo",{stretchy:"true"},"‾")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"1011"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"1011"),t("mtext",null," "),t("mn",null,"0110")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("munder",{accentunder:"true"},[t("mrow",null,[t("mo",null,"+"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"1100"),t("mtext",null," "),t("mn",null,"0101")]),t("mo",{stretchy:"true"},"‾")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0001"),t("mtext",null," "),t("mn",null,"1111"),t("mtext",null," "),t("mn",null,"0111"),t("mtext",null," "),t("mn",null,"1011")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mtext",null,"回卷得到：")])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0001"),t("mtext",null," "),t("mn",null,"1111"),t("mtext",null," "),t("mn",null,"0111"),t("mtext",null," "),t("mn",null,"1100")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mtext",null,"取反得到：")])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"1110"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"1000"),t("mtext",null," "),t("mn",null,"0011")])])])])]),t("annotation",{encoding:"application/x-tex"}," \\begin{array}{cc} & \\ \\ \\ \\ 0101 \\ 0000 \\ 0110 \\ 0101 \\\\ & \\underline{+ \\ 0110 \\ 1001 \\ 0101 \\ 0001} \\\\ & \\ \\ \\ \\ 1011 \\ 1001 \\ 1011 \\ 0110 \\\\ & \\underline{+ \\ 0110 \\ 0101 \\ 1100 \\ 0101} \\\\ & \\ \\ \\ \\ 0001 \\ 1111 \\ 0111 \\ 1011 \\\\ & \\text{回卷得到：} \\\\ & \\ \\ \\ \\ 0001 \\ 1111 \\ 0111 \\ 1100 \\\\ & \\text{取反得到：} \\\\ & \\ \\ \\ \\ 1110 \\ 0000 \\ 1000 \\ 0011 \\\\ \\end{array} ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"10.8em","vertical-align":"-5.15em"}}),t("span",{class:"mord"},[t("span",{class:"mtable"},[t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"col-align-c"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.65em"}},[t("span",{style:{top:"-7.65em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-6.45em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-5.25em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-4.05em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-2.85em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-1.65em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-0.45em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"0.75em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"1.95em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.15em"}},[t("span")])])])]),t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"col-align-c"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.65em"}},[t("span",{style:{top:"-7.81em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")])]),t("span",{style:{top:"-6.61em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord underline"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.6444em"}},[t("span",{style:{top:"-2.7567em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"underline-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},"+"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.2833em"}},[t("span")])])])])])]),t("span",{style:{top:"-5.41em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110")])]),t("span",{style:{top:"-4.21em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord underline"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.6444em"}},[t("span",{style:{top:"-2.7567em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"underline-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},"+"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.2833em"}},[t("span")])])])])])]),t("span",{style:{top:"-3.01em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011")])]),t("span",{style:{top:"-1.81em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord text"},[t("span",{class:"mord cjk_fallback"},"回卷得到：")])])]),t("span",{style:{top:"-0.61em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100")])]),t("span",{style:{top:"0.59em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord text"},[t("span",{class:"mord cjk_fallback"},"取反得到：")])])]),t("span",{style:{top:"1.79em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0011")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.15em"}},[t("span")])])])]),t("span",{class:"arraycolsep",style:{width:"0.5em"}})])])])])])])],-1)),s[21]||(s[21]=m('<p>得到检验和为：<strong id="red-msg">1110 0000 1000 0011</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于伪首部中的字段</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">源 IP 地址</td><td style="text-align:center;">发送方的 IP 地址</td></tr><tr><td style="text-align:center;">目的 IP 地址</td><td style="text-align:center;">接收方的 IP 地址</td></tr><tr><td style="text-align:center;">全零</td><td style="text-align:center;">占 1 B，全 0 ，用于填充</td></tr><tr><td style="text-align:center;">协议</td><td style="text-align:center;">传输层协议（ UDP 为 17 ）</td></tr><tr><td style="text-align:center;">数据长度</td><td style="text-align:center;">UDP 数据报的长度（和首部中的 UDP 长度字段相同）</td></tr></tbody></table><p>对于为什么在过程中需要添加伪首部不需要详细讨论</p></div><h2 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议"><span>TCP 协议</span></a></h2><p>TCP 的传输单元称为 <strong>TCP 报文段 / TCP 段</strong> 因 TCP 协议可对应用层报文进行拆分传输而得名</p><p>TCP 传输过程中分为三个步骤，这三个步骤中传输的数据单元均为 TCP 段</p><ol><li><p>建立连接（三次握手）</p></li><li><p>数据传输</p></li><li><p>释放连接（四次挥手）</p></li></ol><figure><img src="//store.s1r0ko.top/svg/m/cn/24/3_ver_2.svg" alt="TCP 传输过程" tabindex="0" loading="lazy"><figcaption>TCP 传输过程</figcaption></figure><p>在上图中， 3 次握手对应发送三个 TCP 报文段</p><p>握手后建立 TCP 连接可以进行全双工通信</p><p>挥手 ① 和挥手 ② 表示进程 A 已经没有需要发送的数据了，两次挥手后单向断开连接</p><p>之后只有进程 B 可以向进程 A 发送数据，反之则不行</p><p>挥手 ③ 和挥手 ④ 表示进程 B 也没有需要发送的数据了，这两次挥手后关闭进程 B 到进程 A 的连接</p><p>最后结束通信</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>建立一次 TCP 连接可以传输多个应用层报文（可双向）</p></li><li><p>TCP 是面向字节流的（而 UDP 是面向报文的），无论传输多少应用层报文，在 TCP 看来就是一大串字节流即字节流是无边界的，一个 TCP 报文段可以包含多个应用层报文的分段</p></li><li><p>挥手结束 TCP 连接时可以由服务器发起第一次挥手也可以由客户端发起</p></li><li><p>TCP 报文段数据部分的大小受限于 MSS （Max Segment Size），MSS 是 TCP 连接双方协商的最大报文段数据部分大小（有效大小），MSS 的值在 TCP 连接建立时协商，并且 TCP 段<strong>不会强制要求</strong>数据部分大小一定要填充至 MSS 只需要保证不超过即可</p></li></ul></div><h3 id="tcp-数据报" tabindex="-1"><a class="header-anchor" href="#tcp-数据报"><span>TCP 数据报</span></a></h3><p>TCP 数据报有以下特点：</p><ul><li><p>TCP 首部更大，占 20 B ~ 60 B</p></li><li><p>TCP 支持报文自动拆分、重装，因此可以传输长报文</p></li><li><p>TCP 是有连接的、可靠的、支持拥塞控制</p></li><li><p>TCP 仅支持一对一传输（因为通信双方的传输层必须先建立连接）</p></li></ul><p>TCP 支持报文拆分和重装，所以可以进行长报文的传输</p><p><strong id="red-msg">对于 TCP 段的首部字段，不需要记住各字段的顺序和位置，只需要记住每个字段的含义即可</strong></p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/4_ver_3.svg" alt="TCP 数据段结构" tabindex="0" loading="lazy"><figcaption>TCP 数据段结构</figcaption></figure><div class="hint-container info"><p class="hint-container-title">TCP 数据段首部各字段及其含义（标红为重点）</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">bit 数</th><th style="text-align:center;">含义</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;"><strong id="red-msg">源端口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">发送进程的端口号</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong id="red-msg">目的端口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">接收进程的端口号</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong id="red-msg">序号</strong></td><td style="text-align:center;">32 bit</td><td style="text-align:center;">用于标记数据部分第一个字节在原始字节流中的位置</td><td style="text-align:center;">用于接收方重组应用层数据报，起始“序号”是由发送方自己设置的，<strong id="blue-msg">不一定从 0 开始</strong>，通常简写为 seq</td></tr><tr><td style="text-align:center;"><strong id="red-msg">确认号</strong></td><td style="text-align:center;">32 bit</td><td style="text-align:center;">用于反馈，表示序号在该确认号（某字节位）之前的所有字节（<strong id="blue-msg">不包括该字节</strong>）都已正确接收</td><td style="text-align:center;">通常记为 ack 或 ack_seq</td></tr><tr><td style="text-align:center;">数据偏移</td><td style="text-align:center;">4 bit</td><td style="text-align:center;">数据偏移量，单位为 4 B，指出 TCP 数据段的首部长度</td><td style="text-align:center;">取值范围为 0 ~ 15</td></tr><tr><td style="text-align:center;">保留</td><td style="text-align:center;">6 bit</td><td style="text-align:center;">占 6 bit，全 0 ，目前暂时没有用</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">URG</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">紧急指针有效位，为 1 时表示该 TCP 数据段为紧急数据，应尽快推送</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;"><strong id="red-msg">ACK</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">确认号有效位，为 0 时， ack_seq 无效；为 1 时， ack_seq 有效</td><td style="text-align:center;">通常记为 ACK ，<strong id="blue-msg">除握手 ① 之外，其他所有 TCP 段的 ACK 都为 1</strong></td></tr><tr><td style="text-align:center;">PSH</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">推送位，为 1 时表示发送方希望接收方尽快回复（用于交互式通信），该种类的报文段会立即触发接收方的应用层处理，不需要等缓冲区满后才移交应用层</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;">RST</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">重置连接位，为 1 时表示出现严重差错（如主机崩溃），必须释放连接；同时也可以用于拒绝一个非法报文段（如黑客恶意共计）</td><td style="text-align:center;">当有一方接收到非法报文段时，会发送一个 RST 为 1 的报文段，示意双方尽快释放连接避免进一步的安全隐患；不常考</td></tr><tr><td style="text-align:center;"><strong id="red-msg">SYN</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">同步序号位，为 1 时表示这是一个请求连接或者接收连接的报文</td><td style="text-align:center;"><strong id="blue-msg">只有握手 ① 和握手 ② 的 SYN 值为 1 其他都为 0</strong></td></tr><tr><td style="text-align:center;"><strong id="red-msg">FIN</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">结束位，为 1 时表示发送方没有更多数据要发送了，数据已经发送完毕，要求释放连接</td><td style="text-align:center;"><strong id="blue-msg">只有挥手 ① 和挥手 ③ 的 FIN 值为 1 其他都为 0</strong></td></tr><tr><td style="text-align:center;"><strong id="red-msg">窗口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">用于流量控制的关键，表示接收窗口的大小。即从本报文段首部中的 ack_seq 算起，接收方还能接收多少数据（<strong id="blue-msg">以字节为单位</strong>），即接收方接收缓冲区的剩余空间大小（这里其实不严谨，如果接收方接收到的数据不连续，则接收窗口从最后一个连续数据的后一字节开始计数到缓冲区结束，哪怕已经正确收到后面的几个字节数据，但只要和前面数据不连续，这些数据也仍在接收窗口内）</td><td style="text-align:center;">一般简写为 rwnd 或 rcvwnd</td></tr><tr><td style="text-align:center;">校验和</td><td style="text-align:center;">16 bit</td><td style="text-align:center;">用于校验 TCP 数据段首部和数据部分，和 UDP 校验和的计算雷同，也需要添加伪首部再进行计算，只是需要把协议字段的 17 改成 6 （TCP 协议号）、 UDP 长度字段改为 TCP 的长度</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;">紧急指针</td><td style="text-align:center;">16 bit</td><td style="text-align:center;">紧急数据的专用序号，原理和上面的序号类似，所填的值为当前 TCP 数据段的紧急数据末尾字节的下一字节的偏移量，例如：数据部分长度为 8 字节，紧急数据长度为 4 字节，那么紧急指针就填写 4 （即 0 ~ 3 字节为紧急数据，紧急数据末尾字节的下一字节偏移量为 4 也就是第 4 字节开始都是普通数据，之前的都是紧急数据）</td><td style="text-align:center;"><strong id="blue-msg">TCP 数据段如同时含有普通数据和紧急数据，紧急数据必须位于普通数据之前</strong>，不常考</td></tr><tr><td style="text-align:center;">选项</td><td style="text-align:center;">不定长</td><td style="text-align:center;">建立 TCP 连接时，在握手 ① 和握手 ② 中在选项这里协商 MSS ，一般指发送该 TCP 段的来源方的 MSS ，向对方通知自己发送的数据的大小限制</td><td style="text-align:center;">一般就考 MSS 在这部分协商</td></tr><tr><td style="text-align:center;">填充</td><td style="text-align:center;">不定长</td><td style="text-align:center;">用于将 TCP 段首部填充至 4 B 的整数倍大小</td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>TCP 报文段首部没有专门的字段指明 TCP 段的长度为多少（会根据 IP 首部、 TCP 首部的信息算出来）</p></li><li><p>对于标志位为 1 的 TCP 段可以称为对应的标志名 + 段，例如： SYN = 1 时，对应 TCP 段可称为 SYN 段，对于含多个等于 1 的标志位的 TCP 段可以称所有的标志名 + 段，例如：一个 SYN = 1 且 ACK = 1 的 TCP 段可以称其为 SYN 段，也可以称其为 ACK 段</p></li><li><p>现实应用中通常 MSS 不会设置得太大，避免 IP 数据报分片</p></li></ul></div><h3 id="tcp-连接管理" tabindex="-1"><a class="header-anchor" href="#tcp-连接管理"><span>TCP 连接管理</span></a></h3><p>要点：建立连接，数据传输，释放连接过程中， TCP 报文段中 SYN 、 ACK 、 seq 、 ack 等关键字段的变化和区别，以及双方 TCP 状态的变化等</p>',23)),t("div",I,[s[10]||(s[10]=m('<p class="hint-container-title">建立连接</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/5_ver_3.svg" alt="TCP 建立连接字段变化" tabindex="0" loading="lazy"><figcaption>TCP 建立连接字段变化</figcaption></figure><p>握手 ③ 后进入 TCP 双工传输阶段，根据握手 ③ 是否携带数据，服务器发出的第一个 TCP 数据段字段也有所不同</p><p>这里假设携带 100 B 数据</p><table><thead><tr><th style="text-align:center;">第一个 TCP 数据段的字段</th><th style="text-align:center;">握手 ③ 携带数据</th><th style="text-align:center;">握手 ③ 不携带数据</th></tr></thead><tbody><tr><td style="text-align:center;">SYN</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">ACK</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">FIN</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">seq</td><td style="text-align:center;">51</td><td style="text-align:center;">51</td></tr><tr><td style="text-align:center;">ack</td><td style="text-align:center;">767</td><td style="text-align:center;">667</td></tr></tbody></table><ul><li><p>TCP 全过程中，只有握手 ① 和握手 ② 中 SYN 为 1 ，其他都为 0</p></li><li><p>握手 ① 和握手 ② 不能携带数据（只有 TCP 首部），但是仍要消耗一个序号</p></li><li><p>握手 ③ 可以携带数据，也可以不携带数据，如果不携带数据，就可以不消耗序号</p></li></ul><figure><img src="//store.s1r0ko.top/svg/m/cn/24/6_ver_1.svg" alt="TCP 建立连接状态变化" tabindex="0" loading="lazy"><figcaption>TCP 建立连接状态变化</figcaption></figure><p>思考收到某个报文时，双方的状态变化</p><ul><li>考试要点：</li></ul>',9)),t("p",null,[s[7]||(s[7]=a("从发出握手 ① 到客户端进程可以发送数据，至少要多久—— 1 ")),n(o,{to:"/art/learning/master/major/ComputerNetworks/PerformanceMetricsForComputerNetworks.html#%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4rtt"},{default:d(()=>s[6]||(s[6]=[a("RTT")])),_:1})]),t("p",null,[s[9]||(s[9]=a("从发出握手 ① 到服务器进程可以发送数据，至少要多久—— 1.5 ")),n(o,{to:"/art/learning/master/major/ComputerNetworks/PerformanceMetricsForComputerNetworks.html#%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4rtt"},{default:d(()=>s[8]||(s[8]=[a("RTT")])),_:1})]),s[11]||(s[11]=t("p",null,"题目一般会给出 RTT 的具体值",-1))]),s[22]||(s[22]=m('<div class="hint-container info"><p class="hint-container-title">释放连接</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/7_ver_3.svg" alt="TCP 释放连接字段变化" tabindex="0" loading="lazy"><figcaption>TCP 释放连接字段变化</figcaption></figure><ul><li>考试要点：</li></ul><p>在 TCP 全过程中，只有挥手 ① 、挥手 ③ 的 FIN = 1</p><p>挥手 ① 、挥手 ③ 即使不携带数据（可以携带数据），也要消耗一个序号</p><p>挥手 ② 可以携带数据</p><p>挥手 ④ 不可以携带数据</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/8_ver_3.svg" alt="TCP 释放连接状态变化" tabindex="0" loading="lazy"><figcaption>TCP 释放连接状态变化</figcaption></figure><p><strong id="red-msg">这里也可以是服务器先发起挥手，客户端再发起挥手</strong></p><ul><li><strong>释放连接阶段耗时分析</strong></li></ul><p>客户进程收到挥手 ③ ，立即进入 TIME-WAIT 状态，并启动“ TIME-WAIT 计时器”，倒计时 2 MSL 后才能进入 CLOSE 状态。（如果等待期间重复收到挥手 ③ ，则重置计时器）</p><p>MSL （ Max Segment Lifetime ）：最大报文段寿命，是 TCP 协议规定的一个固定时间长度，用于指定一个 TCP 报文段在网络中传输的最大时间。</p><p>如果服务器收到挥手 ① 时，已经没有待传输的数据，那么可以连续发出挥手 ② 、挥手 ③ ，期间<strong id="blue-msg">所耗时间极短</strong>（处于 CLOSE-WAIT 的时间极短）；同样的，客户端也会连续收到挥手 ② 和挥手 ③ ，之间变化两个状态，时间极短（处于 FIN-WAIT-2 的时间极短）</p><ul><li>考试要点：</li></ul><p>从客户端发出挥手 ① ，到客户端进程进入 CLOSE 状态，至少需要多久？—— 1 RTT + 2 MSL</p><p>从客户端发出挥手 ① ，到服务器进程进入 CLOSE 状态，至少需要多久？—— 1.5 RTT</p></div><p><strong>一般称握手 ① 和握手 ② 为 SYN 段，挥手 ① 和挥手 ③ 为 FIN 段</strong></p>',2)),t("h3",_,[t("a",E,[t("span",null,[s[13]||(s[13]=a("TCP 可靠传输和流量控制")),n(o,{to:"/art/learning/master/major/ComputerNetworks/MediaAccessControl.html#%E7%AC%A6%E5%8F%B7%E6%84%8F%E4%B9%89"},{default:d(()=>s[12]||(s[12]=[a("👍")])),_:1})])])]),s[23]||(s[23]=m('<figure><img src="//store.s1r0ko.top/svg/m/cn/24/9_ver_1.svg" alt="TCP 流量控制流程" tabindex="0" loading="lazy"><figcaption>TCP 流量控制流程</figcaption></figure><p>TCP 会创建一个发送缓冲区和一个接收缓冲区，用于存储数据，这个大小一般由操作系统分配，本质上是一个 char 数组</p><p>向对方发送的窗口字段意味自己的接收缓冲区的剩余大小也就是接收窗口的大小，单位为字节（ B ），一般窗口会动态调整大小</p><p>发送窗口的大小不大于发送缓冲区的大小，也不大于对方接收缓冲区的大小，会根据每次对方传输的 TCP 段中的 rwnd 字段进行调整</p><h4 id="tcp-传输过程示例" tabindex="-1"><a class="header-anchor" href="#tcp-传输过程示例"><span>TCP 传输过程示例</span></a></h4><p>假设客户端的缓冲区大小为 10 B ，服务器的缓冲区大小为 8 B</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/10_ver_1.svg" alt="TCP 流量控制流程" tabindex="0" loading="lazy"><figcaption>TCP 流量控制流程</figcaption></figure><ol><li><p>根据后两次握手双方交换接收窗口的大小，此时客户端将发送窗口设置为 8 B 对应服务器接收窗口的大小</p></li><li><p>完成握手后，假设第一次客户端向服务器发送 3 B 数据，也就是发送窗口的前 3 B 数据，服务器接收数据后进行差错控制，并将这 3 B 数据存入接收缓冲区内，假设此时服务器没有开始向客户端发送数据，则返回客户端的 TCP 报文为 ack = 603 ，rwnd = 5 ，表示接收 3 B 数据，600 ~ 602 已正确接收，接收窗口减少 3 B</p></li><li><p>客户端收到返回的报文后，因为没有收到数据，所以 ack 和 rwnd 不作调整，此时将发送窗口后移 3 B ，并将已发送的数据进行清理，载入新的数据放入缓冲区，此时发送窗口的大小为 5 B ，假设此时客户端连续两次发送 TCP 段，都携带 2 B 数据， seq 字段分别为 603 、 605</p></li><li><p>服务器连续收到两个 TCP 段，并对这两个 TCP 段进行差错控制，假设没有差错，则将这两个 TCP 段的数据根据其 seq 字段按照顺序（不需要担心数据报到达先后的问题）存入接收缓冲区内，并且会对 ack 进行累加，只返回一份数据报，该数据报字段为 ack = 607 ， rwnd = 1</p></li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>短时间（很短很短的时间， <strong>TCP 协议规定的时间最长不超过 0.5 秒</strong>）内接收多份 TCP 段，只会返回一份数据报，该数据报的 ack 字段会根据连续收到的数据大小进行累加后得出</p><p>接收方如果要<a href="#%E6%8D%8E%E5%B8%A6%E7%A1%AE%E8%AE%A4">捎带数据</a>，则必须收到第一份 TCP 段时，就需要立刻返回 ACK</p><p>接收方若收到连续两个长度为 MSS 的报文段，则应该立即返回 ACK （避免数据丢失后，重传代价过大）</p><p>正常的 ACK 只有首部，没有数据部分，而捎带数据的 ACK 有数据部分</p></div><ol start="5"><li><p>客户端收到后对缓冲区和发送窗口进行更新，将已发送的数据进行清理，载入新的数据放入缓冲区，发送窗口的大小为 1 B ，此时只能发送 1 B 的数据</p></li><li><p>服务器收到最后这 1 B 的数据后，此时缓冲区已被填满，接收窗口为 0 ，此时服务器会将这部分数据（ 8 B ）按顺序交付给应用层，同时情况缓冲区，调整接收窗口为 8 B ，返回报文， ack = 608 ， rwnd = 8</p></li><li><p>客户端收到 ack = 608 的报文后，将发送窗口后移 1 B ，清理已发送的数据，并载入新的数据进入缓冲区，此时发送窗口大小为 0 ，并且根据传回来的报文中 rwnd 字段为 8 说明服务器已经重置接收窗口，于是客户端重新将发送窗口设置为 8 B ，开始下一轮发送</p></li></ol><h4 id="捎带确认" tabindex="-1"><a class="header-anchor" href="#捎带确认"><span>捎带确认</span></a></h4><figure><img src="//store.s1r0ko.top/svg/m/cn/24/11_ver_1.svg" alt="捎带确认机制" tabindex="0" loading="lazy"><figcaption>捎带确认机制</figcaption></figure><ol><li><p>继续上面的例子，此时客户端继续向服务器发送 2 B 数据， seq 字段为 608 ，服务器收到后进行差错控制，并将这 2 B 数据存入接收缓冲区内，此时服务器开始向客户端发送 5 B 的数据，于是将这部分数据载入发送缓冲区，此时服务器发送窗口为 8 B ，向客户端发送的 TCP 段各字段为 seq = 200 ， ack = 610 ， rwnd = 6</p></li><li><p>客户端收到该 TCP 段后对数据进行差错控制，没有发现错误后放入接收缓冲区，将接收窗口减小 5 B ，并且根据接收到的 rwnd 字段调整发送窗口，将窗口后移 2 B 并清理数据，载入新数据，向服务器发送 6 B 的数据，此时发送的 TCP 段各字段为： seq = 610 ， ack = 205 ， rwnd = 5</p></li><li><p>接收到新 TCP 段，服务器各数据变化如下</p></li></ol><p>接收传输 ③ ，发送传输 ④</p><p>发送 0 B 数据，接收 6 B 数据</p>',15)),n(u,{tableData:{receivedSegments:[{field:"seq",value:610},{field:"ack",value:205},{field:"rwnd",value:5}],dataChanges:[{part:"接收窗口",change:"6 -> 0 -> 8"},{part:"发送窗口",change:"8 -> 5"}],sentSegments:[{field:"seq",value:205},{field:"ack",value:616},{field:"rwnd",value:8}]}}),s[24]||(s[24]=t("ol",{start:"4"},[t("li",null,"客户端接收到服务器的 TCP 段，各数据变化如下")],-1)),s[25]||(s[25]=t("p",null,"接收传输 ④ ，发送传输 ⑤",-1)),s[26]||(s[26]=t("p",null,"发送 2 B 数据，接收 0 B 数据",-1)),n(u,{tableData:{receivedSegments:[{field:"seq",value:205},{field:"ack",value:616},{field:"rwnd",value:8}],dataChanges:[{part:"接收窗口",change:"5 -> 5"},{part:"发送窗口",change:"0 -> 8"}],sentSegments:[{field:"seq",value:616},{field:"ack",value:205},{field:"rwnd",value:5}]}}),s[27]||(s[27]=t("ol",{start:"5"},[t("li",null,"服务器收到客户端的 TCP 段，各数据变化如下")],-1)),s[28]||(s[28]=t("p",null,"接收传输 ⑤ ，发送传输 ⑥",-1)),s[29]||(s[29]=t("p",null,"发送 0 B 数据，接收 2 B 数据",-1)),s[30]||(s[30]=t("p",null,[a("这里服务器接收窗口的变化为 8 -> 6 -> 8 ，是因为服务器收到 TCP 段后检查无误立刻将报文按序转交应用层（不需要等缓冲区满再提交，可以进行此操作的前提是"),t("strong",{id:"red-msg"},"按序"),a("，也就是必须是前 n 个数据都必须完整接收到才能提交；反之假设目前接收窗口内期待的按顺序第一个 TCP 段未收到，此时哪怕已经收齐了后续的所有 TCP 段，也不能提前提交）")],-1)),n(u,{tableData:{receivedSegments:[{field:"seq",value:616},{field:"ack",value:205},{field:"rwnd",value:5}],dataChanges:[{part:"接收窗口",change:"8 -> 6 -> 8"},{part:"发送窗口",change:"5 -> 5"}],sentSegments:[{field:"seq",value:205},{field:"ack",value:618},{field:"rwnd",value:8}]}}),s[31]||(s[31]=m('<h4 id="超时重传机制" tabindex="-1"><a class="header-anchor" href="#超时重传机制"><span>超时重传机制</span></a></h4><p>主机每次发出一次 TCP 段时都会设立一个计时器，在计时器范围内未收到对方的确认报文，就会重新发送该 TCP 段并重置计时器，这个过程称为超时重传</p><p>这里有两种情况</p><ul><li>TCP 段在前往目的主机中丢失</li></ul><p>发送方计时器超时，触发重传机制，目的主机第二次顺利接收到并返回 ACK</p><ul><li>TCP 段目的主机正确接收，返回的 ACK 在计时器范围内未收到</li></ul><p>目的主机接收到 TCP 段后，差错控制，并写入 2 B 数据返回 ACK ， ACK 在返回发送方路程中丢失，发送方计时器超时触发重传，此时目的主机正确接收，但是比对自身记录的期待值发现这 2 B 数据在已正确接收的范围内，于是丢弃该段并再次发送 ACK ，此 ACK 内容和第一次发送的 ACK 内容相同</p><h4 id="快重传机制" tabindex="-1"><a class="header-anchor" href="#快重传机制"><span>快重传机制</span></a></h4><p>对于推迟重传机制，仍有部分缺点，例如：</p><p>假设发送方发送窗口为 4 并向接收方连续发送 4 份 TCP 段，设为 1 号、 2 号、 3 号、 4 号，由于不可抗因素， 2 号段在发送路程上丢失，此时接收方只顺利接收 1 号、 3 号、 4 号段，此时接收方由于接收的数据并不连续，此时返回的 ACK 内的 ack 字段仅在收到的 TCP 段 seq 字段的基础上加一，接收窗口也只减一； ACK 到达发送方时由于确认号仅加一且接收方接收窗口仅减一，于是发送窗口也只能减一，此时发送方发送窗口为 3 ，由于这四个数据在发送时都设置的超时重传计时器，且窗口内已无未发送数据，于是此时发送方只能等待计时器超时，并且没有任何动作，直到计时器超时才会重新发送这三个数据，而接收方也在等待 2 号数据，等待重传后收到三个数据检查发现后两个数据已经正确接收，于是丢弃，只接收 2 号数据，完成窗口移动……</p><p>由上述例子可以得出，推迟重传机制在发送多个报文段的过程中，如果其中个别报文段丢失，之后的超时重传机制会导致大量的时间浪费和性能浪费</p><p>面对这种情况，可以采用快重传机制解决</p><p>快重传需要使用立即确认机制（即在收到 TCP 段后立刻发送 ACK ）</p><p>对于上面的例子，在快重传机制下，收到 1 、 3 、 4 号段后会立刻发送 ACK ，这三个 ACK 的确认号都是一样的，在快重传机制下，如果<strong>发送方接收到连续 3 个确认号相同的</strong> <strong id="red-msg">冗余 ACK <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></strong> <strong>，就会立刻重发对应的报文段（ ACK 段内 ack 字段指向的对应 seq 字段的数据，也就是丢失的那个数据）</strong>，也就是重传 2 号段，接收方接收到缺失的报文段后，就继续完成对应的流程……</p><p>快重传机制大大提升了效率，但仍有缺陷，快重传机制仅适合处理<strong>丢失一个报文段</strong>的情况，若丢失多个报文段，快重传机制就可能会失效</p><h3 id="tcp-拥塞控制" tabindex="-1"><a class="header-anchor" href="#tcp-拥塞控制"><span>TCP 拥塞控制</span></a></h3><p>拥塞控制主要有四种算法：慢开始算法（解决网络严重拥塞的情况）、拥塞避免算法、快重传、快恢复算法（解决网络轻微拥塞的情况）</p><p>并引入机制：拥塞窗口（ cwnd ）</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>发送窗口的上限值</mtext><mo>=</mo><mi>min</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mi>r</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex"> \\text{发送窗口的上限值} = \\min{(rwnd, cwnd)} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">发送窗口的上限值</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span></span></span></p><ul><li>流量控制和拥塞控制的区别</li></ul><table><thead><tr><th style="text-align:left;">流量控制</th><th style="text-align:left;">拥塞控制</th></tr></thead><tbody><tr><td style="text-align:left;">控制<strong>端到端</strong>的数据发送量，是“<strong>局部的</strong>”</td><td style="text-align:left;">控制<strong>整个网络</strong>中每台主机的数据发送量，降低路由器负载，是“<strong>全局的</strong>”</td></tr></tbody></table><ul><li><p>如何判断网络拥塞</p><ul><li><p>发出的每个报文段，都能顺利地收到 ACK 确认——不拥塞</p></li><li><p>发出的报文段未能按时收到 ACK ，引发<strong>超时重传</strong>——<strong>拥塞</strong></p></li><li><p>收到冗余 ACK ，引发<strong>快重传</strong>——<strong>有点拥塞</strong></p></li></ul></li><li><p>如果检测到网络拥塞怎么办？</p><ul><li><p>迅速减少发送的数据量</p></li><li><p><strong>严重拥塞</strong>就<strong>迅速减小</strong>拥塞窗口</p></li><li><p><strong>有点拥塞</strong>就<strong>适当减小</strong>拥塞窗口</p></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>拥塞控制考题特点：</p><ol><li><p>常与“流量控制”综合考察，此时需要考虑接收窗口大小</p></li><li><p>通常只涉及单向传输（ TCP 连接双方只有一方发送数据）</p></li><li><p><strong id="red-msg">通常默认每个 TCP 报文段都以最大段长 MSS 满载数据</strong></p></li><li><p><strong id="red-msg">拥塞窗口的大小常以“ MSS 的倍数”作为单位</strong>（例如此时 MSS 为 1000 B ，则拥塞窗口的大小单位为 2 则拥塞窗口的大小为 MSS 的 2 倍，即 2000 B ）</p></li><li><p>接收方收到一个报文段，会“立即确认”（能够引发快重传机制，可以考察到对应的内容），而不是“推迟确认”</p></li></ol></div><h4 id="慢开始、拥塞避免算法" tabindex="-1"><a class="header-anchor" href="#慢开始、拥塞避免算法"><span>慢开始、拥塞避免算法</span></a></h4><p>假设下面的例子中接收方的接收窗口无限大，这样发送窗口的上限就只取决于拥塞窗口的大小</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/12_ver_3.svg" alt="慢开始、拥塞避免算法示意图" tabindex="0" loading="lazy"><figcaption>慢开始、拥塞避免算法示意图</figcaption></figure><p>根据上图解释：</p><p>开始时 cwnd 为 1 ，随着每次收到 ACK ， cwnd 就会加 1 （效果为每过 1 个 RTT 的时间， cwnd 就会翻一番），直到 cwnd 大于等于 ssthresh ，此时就会进入拥塞避免算法，此时无论收到多少 ACK ，每过 1 个 RTT 只会增加 cwnd 一次</p><p>当 RTT = 12 时，假设此时发生了严重拥塞（<strong id="blue-msg">发送的数据报有部分超时或丢失导致</strong><strong id="red-msg">超时重传</strong>）此时会迅速减少 cwnd 到 1 并且将 ssthresh 设置为当前 cwnd 的一半（ ssthresh 不能小于 2 ）图中为 12 ；如果是收到冗余 ACK 那么 cwnd 不会迅速下降到 1</p><p>于是重新开始慢开始算法，直到某次发送 8 数据 ACK 后，由于 8 再翻倍是 16 大于了 ssthresh ，这里只会将 cwnd 增加到 ssthresh 然后进入拥塞避免算法</p><ul><li><strong>术语解释</strong></li></ul><p>ssthresh ：慢开始门限（正规翻译） / 拥塞控制阈值（真题术语）</p><p>慢开始算法： cwnd 值从 1 开始，每收到 1 个 ACK ，就让 cwnd + 1 （当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo>&lt;</mo><mi>s</mi><mi>s</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">cwnd \\lt ssthresh</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ss</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">res</span><span class="mord mathnormal">h</span></span></span></span> 时适用）</p><p>拥塞避免算法：在一个 RTT 内，即使收到多个 ACK ，也只能让 cwnd + 1 （当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo>≥</mo><mi>s</mi><mi>s</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">cwnd \\ge ssthresh</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ss</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">res</span><span class="mord mathnormal">h</span></span></span></span> 时适用）</p><h4 id="快重传、快恢复算法" tabindex="-1"><a class="header-anchor" href="#快重传、快恢复算法"><span>快重传、快恢复算法</span></a></h4><p>和慢开始、拥塞避免算法前期处理类似，但是遇到拥塞后的处理方法不同</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/13_ver_2.svg" alt="快重传、快恢复算法示意图" tabindex="0" loading="lazy"><figcaption>快重传、快恢复算法示意图</figcaption></figure><ul><li><strong>术语解释</strong></li></ul><p>快重传：当发送方收到 3 个确认号相同的冗余 ACK 时（至少收到 4 个相同的 ACK ），立即重传对应报文段</p><p>快恢复：一旦发生<strong>快重传</strong>，就<strong>将阈值、 cwnd 都设为当前 cwnd 的一半</strong>，然后切换为“<strong>拥塞避免算法</strong>”</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><strong id="red-msg">接收方接收到的第一个 ACK 不属于冗余 ACK ，只有当接收到的第二个 ACK 和第一个 ACK 完全相同时，才会开始计数，若后续收到的 ACK 与第一个 ACK 不同，就会重新开始计数，即至少需要收到连续 4 个完全相同的 ACK 才会触发重传</strong> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',42))])}}},z=JSON.parse('{"path":"/art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.html","title":"传输层提供的服务","lang":"zh-CN","frontmatter":{"title":"传输层提供的服务","date":"2025-08-05T00:00:00.000Z","icon":"earth-americas","order":24,"category":["408","计算机网络","考研"],"description":"传输层概述 两台主机的两个应用通过 IP + 端口号（套接字） 实现通信 套接字分为： TCP 套接字和 UDP 套接字 注意 两台主机的端口号是相互独立的 TCP 、 UDP 的端口号也是相互独立的 当两个进程之间需要进行通信时，需要指明： 使用哪种传输层协议 本进程绑定的端口号 对方 IP 地址和端口号 熟知端口号 0~1023 为熟知端口号，开发...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传输层提供的服务\\",\\"image\\":[\\"//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/2_ver_2.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/3_ver_2.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/4_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/5_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/6_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/7_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/8_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/9_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/10_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/11_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/12_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/13_ver_2.svg\\"],\\"datePublished\\":\\"2025-08-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-13T09:03:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"传输层提供的服务"}],["meta",{"property":"og:description","content":"传输层概述 两台主机的两个应用通过 IP + 端口号（套接字） 实现通信 套接字分为： TCP 套接字和 UDP 套接字 注意 两台主机的端口号是相互独立的 TCP 、 UDP 的端口号也是相互独立的 当两个进程之间需要进行通信时，需要指明： 使用哪种传输层协议 本进程绑定的端口号 对方 IP 地址和端口号 熟知端口号 0~1023 为熟知端口号，开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-13T09:03:10.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-13T09:03:10.000Z"}]]},"git":{"createdTime":1754295547000,"updatedTime":1755075790000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":11,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":25.91,"words":7772},"filePathRelative":"art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.md","excerpt":"<h2>传输层概述</h2>\\n<p>两台主机的两个应用通过 <code>IP + 端口号</code>（套接字） 实现通信</p>\\n<p>套接字分为： TCP 套接字和 UDP 套接字</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<ul>\\n<li>\\n<p>两台主机的端口号是相互独立的</p>\\n</li>\\n<li>\\n<p>TCP 、 UDP 的端口号也是相互独立的</p>\\n</li>\\n<li>\\n<p>当两个进程之间需要进行通信时，需要指明：</p>\\n<ol>\\n<li>\\n<p>使用哪种传输层协议</p>\\n</li>\\n<li>\\n<p>本进程绑定的端口号</p>\\n</li>\\n<li>\\n<p>对方 IP 地址和端口号</p>\\n</li>\\n</ol>\\n</li>\\n</ul>\\n</div>","autoDesc":true}');export{R as comp,z as data};
