import{_ as e,c as i,b as s,o as t}from"./app-DSk4qmjj.js";const r={};function n(h,a){return t(),i("div",null,a[0]||(a[0]=[s(`<h2 id="数据结构和数据对象的区别" tabindex="-1"><a class="header-anchor" href="#数据结构和数据对象的区别"><span>数据结构和数据对象的区别</span></a></h2><p>在于，数据结构不仅包含各个数据元素，还包含数据元素之间的关系，而数据对象仅包含所有数据元素，是一个集合</p><h2 id="数据结构的三要素" tabindex="-1"><a class="header-anchor" href="#数据结构的三要素"><span>数据结构的三要素</span></a></h2><h3 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构"><span>逻辑结构</span></a></h3><hr><h4 id="集合-基本不讨论" tabindex="-1"><a class="header-anchor" href="#集合-基本不讨论"><span><s>集合 （基本不讨论）</s></span></a></h4><hr><p>各个数据元素同属一个集合，元素间没有任何关系</p><h4 id="线性结构" tabindex="-1"><a class="header-anchor" href="#线性结构"><span>线性结构</span></a></h4><hr><p>数据元素之间是一对一关系，除第一个元素之外，每个元素都有唯一一个前驱；除最后一个元素之外，每个元素都有唯一一个后继</p><h4 id="树形结构" tabindex="-1"><a class="header-anchor" href="#树形结构"><span>树形结构</span></a></h4><hr><p>树形元素间是一对多关系</p><h4 id="图状结构-网状结构" tabindex="-1"><a class="header-anchor" href="#图状结构-网状结构"><span>图状结构（网状结构）</span></a></h4><hr><p>数据元素是多对多关系</p><h3 id="物理结构-存储结构" tabindex="-1"><a class="header-anchor" href="#物理结构-存储结构"><span>物理结构（存储结构）</span></a></h3><hr><p>如何存储逻辑关系</p><h4 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储"><span>顺序存储</span></a></h4><hr><p>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</p><h4 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储"><span>链式存储</span></a></h4><hr><p>逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系</p><h4 id="索引存储" tabindex="-1"><a class="header-anchor" href="#索引存储"><span>索引存储</span></a></h4><hr><p>在存储元素信息的同时，还建立附加的索引表，索引表中的每项称为索引项，索引项的一般形式为（关键字、地址）</p><h4 id="散列存储-哈希存储" tabindex="-1"><a class="header-anchor" href="#散列存储-哈希存储"><span>散列存储（哈希存储）</span></a></h4><hr><p>根据数据元素的关键字直接计算出该元素的存储地址</p><p><strong>一些注意点：</strong></p><ul><li>链式存储，索引存储，散列存储三个被称为非顺序存储</li><li>数据的存储结构会影响存储空间分配的方便程度</li><li>数据的存储结构也会影响数据运算的速度</li></ul><h3 id="数据的运算" tabindex="-1"><a class="header-anchor" href="#数据的运算"><span>数据的运算</span></a></h3><hr><p>运算的定义是针对逻辑结构的，指出运算的功能、运算的实现是针对存储结构的，指出运算的具体步骤</p><h2 id="数据类型和抽象数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型和抽象数据类型"><span>数据类型和抽象数据类型</span></a></h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><hr><p><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称</p><h4 id="原子类型" tabindex="-1"><a class="header-anchor" href="#原子类型"><span>原子类型</span></a></h4><hr><p>其值不可再分的数据类型</p><p>比如：bool类型、int类型</p><h4 id="结构类型" tabindex="-1"><a class="header-anchor" href="#结构类型"><span>结构类型</span></a></h4><hr><p>其值可以再分解为若干成分（分量）的数据类型</p><p>如在C语言中的结构体类型：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Customer {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 各种值的范围和操作可以人为定义</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> people;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象数据类型-abstract-data-type-adt" tabindex="-1"><a class="header-anchor" href="#抽象数据类型-abstract-data-type-adt"><span>抽象数据类型（Abstract Data Type，ADT）</span></a></h3><hr><p>是抽象数据组织以及与之相关的操作</p><p>抽象数据类型一般补不讨论物理结构，只讨论逻辑结构和运算</p>`,54)]))}const c=e(r,[["render",n]]),l=JSON.parse('{"path":"/art/learning/master/major/DataStructure/OverviewOfDataStructures.html","title":"数据结构概论","lang":"zh-CN","frontmatter":{"title":"数据结构概论","date":"2025-04-21T00:00:00.000Z","icon":"database","order":1,"category":["408","数据结构","考研"],"tag":["c","c++"],"description":"数据结构和数据对象的区别 在于，数据结构不仅包含各个数据元素，还包含数据元素之间的关系，而数据对象仅包含所有数据元素，是一个集合 数据结构的三要素 逻辑结构 各个数据元素同属一个集合，元素间没有任何关系 线性结构 数据元素之间是一对一关系，除第一个元素之外，每个元素都有唯一一个前驱；除最后一个元素之外，每个元素都有唯一一个后继 树形结构 树形元素间是一...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构概论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-14T15:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/DataStructure/OverviewOfDataStructures.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"数据结构概论"}],["meta",{"property":"og:description","content":"数据结构和数据对象的区别 在于，数据结构不仅包含各个数据元素，还包含数据元素之间的关系，而数据对象仅包含所有数据元素，是一个集合 数据结构的三要素 逻辑结构 各个数据元素同属一个集合，元素间没有任何关系 线性结构 数据元素之间是一对一关系，除第一个元素之外，每个元素都有唯一一个前驱；除最后一个元素之外，每个元素都有唯一一个后继 树形结构 树形元素间是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T15:05:37.000Z"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:published_time","content":"2025-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-14T15:05:37.000Z"}]]},"git":{"createdTime":1745226475000,"updatedTime":1747235137000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":10,"url":"https://github.com/KurimulaAiri"}],"changelog":[{"hash":"9965e9a9c086e647e575dbe1ce7affa0fe5f7832","time":1747235137000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"更新部分写作时间"},{"hash":"69f35349fba359885f49271717069f1fd6955367","time":1745927563000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修订"},{"hash":"2c8ac55490e86e0d8c87d912335f47d7d72b04d9","time":1745919502000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"更新思维导图支持"},{"hash":"141a193dfcab2bbf2db55dcb877e2ec4d977dcf8","time":1745663915000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修正部分文件命名"},{"hash":"76786d5c6322e5e6f472429dbec14e5e21c8764e","time":1745318553000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"数据结构修改"},{"hash":"683ff316654ee0237e6fe6d446ff9e98425592f8","time":1745288557000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修订"},{"hash":"f7cfac34f79dc337fe54a09040c84db34d73e0fc","time":1745287918000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修订"},{"hash":"d40ff1be0a978a6e9acaea0c2009f84cade8936e","time":1745240292000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修订"},{"hash":"7f5a62826823c1ebccd7c438732c7095933568ee","time":1745240035000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"修改部分"},{"hash":"7b12dacbb8d529c88371413b55831d02e974c152","time":1745226475000,"email":"1095370199@qq.com","author":"KurimulaAiri","message":"添加数据结构部分章节"}]},"readingTime":{"minutes":2.33,"words":700},"filePathRelative":"art/learning/master/major/DataStructure/OverviewOfDataStructures.md","excerpt":"<h2>数据结构和数据对象的区别</h2>\\n<p>在于，数据结构不仅包含各个数据元素，还包含数据元素之间的关系，而数据对象仅包含所有数据元素，是一个集合</p>\\n<h2>数据结构的三要素</h2>\\n<h3>逻辑结构</h3>\\n<hr>\\n<h4><s>集合 （基本不讨论）</s></h4>\\n<hr>\\n<p>各个数据元素同属一个集合，元素间没有任何关系</p>\\n<h4>线性结构</h4>\\n<hr>\\n<p>数据元素之间是一对一关系，除第一个元素之外，每个元素都有唯一一个前驱；除最后一个元素之外，每个元素都有唯一一个后继</p>\\n<h4>树形结构</h4>\\n<hr>\\n<p>树形元素间是一对多关系</p>","autoDesc":true}');export{c as comp,l as data};
