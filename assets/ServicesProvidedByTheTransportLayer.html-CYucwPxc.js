import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as t,d as l,b as a,e,w as r,r as p,o as m}from"./app-DLfYHj4W.js";const o={},g={class:"hint-container info"};function y(u,s){const i=p("MarkMap"),n=p("RouteLink");return m(),d("div",null,[s[11]||(s[11]=t("h2",{id:"传输层概述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#传输层概述"},[t("span",null,"传输层概述")])],-1)),l(i,{content:"eJyFVFtLG0EUfs+vGPBtIeC1UKFPLYVCH4S29FlsoEXFIlJKS2W9kMSYzUYbjbmZGBMNptnEVs2ai/kvds7M7lP+Qs/sJJvQVArLsjNzvu9855tz1uv1epbnVxeX5z/OeghZWFlaWX2+6vN98b30ffItzZJp3F2e//z2w7u197gaH/cIiGeM0FbOuvsOl5vsbNPq1HBrjPByFfRTntym7TSPlcTeGLHVpNUJ3KtpRZHnoNcV5V7NsFzAqvqp2WTphsCYKjUv+M4tGAhI8dKux+Ml7FeJbeseVEEIrqo66DUX4vKxoypt7POUKTZ3f/DyLn70Qa+fzpHf6gZ582yOULPAzzXQdMsw/iJAtOAYoIV4gWXBQwcrUcgkKyKK8mplYdG3RqAYZ5EiVOKKQp6Qr+QFxqZrkFFnXf5v3VYYYlWsEU9k4by9x5tpalZk7W5d1Ay5bkAjhj723RCCXEaMgaCfXzYdl9IahE4gUaLtDgKGK+u7gO77szxbdA/I+PrE+OSUosgIGYWlgWmCfmFttZGINiJWvtwDJrftgGadbUhRqAga7sXwRNMyagNuZJ5en348MTNBuq0gj9Sg/pOaGvg1ahZZrmVvXIMR7LZ2hHow8ixYR/DD6nm2wpKbA35BPbn+aGZmaua/CdA1CGWxIOkgGMcYLqiC4o1o6S8u5QeCRK1qknZOepCChrpgPywcF32Nmp0tBNNmBG8MwdQUyG4rCekS6Hu2usEOakwTbcbiN6AmRAtEw6NXDYUkXnVPhF6lzaL0QQbjkTtqsgOd9I6QfnqhHbnc9NiNLHYzmn5A5KRhoZCMYZVTfmLQRoE2j4QrKYEa7jqoG3YswU5Vdu1MpTMWzgoCDXkI0YiiUDMPrS1Jqiii4NsbNBK7p+fI4a2iYBehENF3XmeuRol46gpL+AcdNWNiVxvh7MmM7snmFL8lPUrvUnLe5XiIfHYmj0FW5xj5sUYcZrTCzuR6Ped0hHRJYtBhp1i09l6N4SN86mSGbRMcRpgdXAl9bT/+SaCl2jEVCufO0THaz9Rz624L63OGNZ4bFiC6Vmp4SIAwyRUgUyMCGxo9Q8McjjwULqUAW81C4ww6ZZFdKqnhnP4BR4WRVA=="}),s[12]||(s[12]=a('<p>两台主机的两个应用通过 <code>IP + 端口号</code>（套接字） 实现通信</p><p>套接字分为： TCP 套接字和 UDP 套接字</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>两台主机的端口号是相互独立的</p></li><li><p>TCP 、 UDP 的端口号也是相互独立的</p></li><li><p>当两个进程之间需要进行通信时，需要指明：</p><ol><li><p>使用哪种传输层协议</p></li><li><p>本进程绑定的端口号</p></li><li><p>对方 IP 地址和端口号</p></li></ol></li></ul></div><h3 id="熟知端口号" tabindex="-1"><a class="header-anchor" href="#熟知端口号"><span>熟知端口号</span></a></h3><p>0~1023 为熟知端口号，开发的时候一般不使用</p><p>其他端口号在实际开发时没有特别严格的限制，只要在本机没有被使用的端口号都可以使用</p><p>端口号分类只是一种“建议标准”，而非“强制标准”</p><div class="hint-container tip"><p class="hint-container-title">常见熟知端口号</p><table><thead><tr><th style="text-align:center;">应用程序</th><th style="text-align:center;">FTP</th><th style="text-align:center;">TELNET</th><th style="text-align:center;">SMTP</th><th style="text-align:center;">DNS</th><th style="text-align:center;">TFTP</th><th style="text-align:center;">HTTP</th><th style="text-align:center;">SNMP</th></tr></thead><tbody><tr><td style="text-align:center;">端口号</td><td style="text-align:center;">21</td><td style="text-align:center;">23</td><td style="text-align:center;">25</td><td style="text-align:center;">53</td><td style="text-align:center;">69</td><td style="text-align:center;">80</td><td style="text-align:center;">161</td></tr></tbody></table></div><h3 id="有连接和无连接" tabindex="-1"><a class="header-anchor" href="#有连接和无连接"><span>有连接和无连接</span></a></h3><p>有连接：在传输数据前先打招呼，先确认对方已经准备好接收数据。传输结束时也要告知对方已结束</p><p>无连接：不打招呼，直接把数据传给对方</p><h3 id="可靠传输和不可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输和不可靠传输"><span>可靠传输和不可靠传输</span></a></h3><p>可靠传输：接收方使用“确认机制”让发送方知道哪些数据已经被正确接收</p><p>不可靠的：接收方无论收没收到数据、数据是否正确，都不给发送方反馈</p><h2 id="udp-协议" tabindex="-1"><a class="header-anchor" href="#udp-协议"><span>UDP 协议</span></a></h2><h3 id="udp-数据报" tabindex="-1"><a class="header-anchor" href="#udp-数据报"><span>UDP 数据报</span></a></h3><p>传输层收到应用层的数据后会在其首部添加一个 8 B 大小的 UDP 首部</p><p>UDP 数据报有以下特点</p><ul><li><p>UDP 首部很小只占 8 B</p></li><li><p>UDP 每次传输一个完整的报文，不支持报文自动拆分、重装</p></li><li><p>UDP 是无连接的、不可靠的（可靠性可以交给应用层处理），也不支持拥塞控制</p></li><li><p>UDP 支持一对一（封装成单播 IP 数据报）、一对多传输（封装成广播 / 多播 IP 数据报）</p></li></ul><figure><img src="//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg" alt="UDP 数据报格式" tabindex="0" loading="lazy"><figcaption>UDP 数据报格式</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>由于 UDP 不支持报文拆分和重装，因此应用层的报文长度不能超过 UDP 协议上限</li></ul><p>UDP 数据报中，首部固定占 8 B</p><p>首部各字段及其作用：</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">源端口号</td><td style="text-align:center;">发送进程的端口号（如果不需要对方回复可以全设置为 0 ）</td></tr><tr><td style="text-align:center;">目的端口号</td><td style="text-align:center;">接收进程的端口号（必填）</td></tr><tr><td style="text-align:center;">UDP 长度</td><td style="text-align:center;">包含首部，以“字节”为单位</td></tr><tr><td style="text-align:center;">UDP 检验和</td><td style="text-align:center;">由发送方的传输计算并填入校验和，接收方的传输层检测是否有差错（如果无需校验，可以填入全 0 ）</td></tr></tbody></table><p>数据部分为一个完整的应用层报文</p><p>UDP 数据报理论最大长度为 <strong>65535 B</strong> （ 64 Kb ）这是由 <strong>IP 数据报数据部分长度限制</strong>（ IP 数据报数据部分最长为 65535 B ）所限制的</p></div><h3 id="udp-检验" tabindex="-1"><a class="header-anchor" href="#udp-检验"><span>UDP 检验</span></a></h3><figure><img src="//store.s1r0ko.top/svg/m/cn/24/2_ver_2.svg" alt="UDP 检验过程格式" tabindex="0" loading="lazy"><figcaption>UDP 检验过程格式</figcaption></figure><p>对于<strong id="blue-msg">发送方</strong>，会在交付给网络层之前进行<strong>检验和计算</strong>，并将结果填入 UDP 首部的检验和字段中，具体步骤如下</p><ol><li><p>传输层 UDP 协议在计算检验和之前，先添加一个伪首部</p></li><li><p>把伪首部、首部、数据部分以 16 bit 为一组，进行<a href="text.com">二进制加法</a>（最高位产生的进位需要回卷）</p></li><li><p>将最终的加法结果逐位取反，就得到 16 bit 的检验和，将其填入 UDP 首部</p></li><li><p>去掉伪首部，并将 UDP 数据报交给网络层，封装成 IP 数据报</p></li></ol><p>对于<strong id="blue-msg">接收方</strong>收到数据后也会有相似的操作</p>',26)),t("ol",null,[s[3]||(s[3]=t("li",null,[t("p",null,"网络层向传输层递交 UDP 数据报")],-1)),s[4]||(s[4]=t("li",null,[t("p",null,"传输层在 UDP 数据报之前，添加伪首部")],-1)),t("li",null,[t("p",null,[s[1]||(s[1]=e("吧伪首部、 UDP 首部、数据部分以 16 bit 为一组，进行")),l(n,{to:"/art/learning/master/major/ComputerNetworks/test.html"},{default:r(()=>s[0]||(s[0]=[e("二进制加法")])),_:1}),s[2]||(s[2]=e("（最高位的进位需要回卷）"))])]),s[5]||(s[5]=t("li",null,[t("p",null,"如果加法结果全为 1 ，说明没有比特错误，于是接收该 UDP 数据报，并根据目的端口号，向应用层递交报文；如果加法结果不全为 1 ，说明有差错，于是丢弃该 UDP 数据报")],-1))]),s[13]||(s[13]=t("ul",null,[t("li",null,[t("strong",null,"二进制计算过程")])],-1)),s[14]||(s[14]=t("p",null,"假设有 48 bit 数据为：",-1)),s[15]||(s[15]=t("p",{class:"katex-block"},[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mspace",{linebreak:"newline"}),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0001"),t("mspace",{linebreak:"newline"}),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"1100"),t("mtext",null," "),t("mn",null,"0101"),t("mspace",{linebreak:"newline"})]),t("annotation",{encoding:"application/x-tex"}," 0101\\ 0000\\ 0110\\ 0101 \\\\ 0110\\ 1001\\ 0101\\ 0001 \\\\ 0110\\ 0101\\ 1100\\ 0101 \\\\ ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6444em"}}),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")]),t("span",{class:"mspace newline"})])])])],-1)),s[16]||(s[16]=t("p",null,"计算过程为：",-1)),s[17]||(s[17]=t("p",{class:"katex-block"},[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},[t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("munder",{accentunder:"true"},[t("mrow",null,[t("mo",null,"+"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"0001")]),t("mo",{stretchy:"true"},"‾")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"1011"),t("mtext",null," "),t("mn",null,"1001"),t("mtext",null," "),t("mn",null,"1011"),t("mtext",null," "),t("mn",null,"0110")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("munder",{accentunder:"true"},[t("mrow",null,[t("mo",null,"+"),t("mtext",null," "),t("mn",null,"0110"),t("mtext",null," "),t("mn",null,"0101"),t("mtext",null," "),t("mn",null,"1100"),t("mtext",null," "),t("mn",null,"0101")]),t("mo",{stretchy:"true"},"‾")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0001"),t("mtext",null," "),t("mn",null,"1111"),t("mtext",null," "),t("mn",null,"0111"),t("mtext",null," "),t("mn",null,"1011")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mtext",null,"回卷得到：")])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"0001"),t("mtext",null," "),t("mn",null,"1111"),t("mtext",null," "),t("mn",null,"0111"),t("mtext",null," "),t("mn",null,"1100")])])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mtext",null,"取反得到：")])])]),t("mtr",null,[t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow")])]),t("mtd",null,[t("mstyle",{scriptlevel:"0",displaystyle:"false"},[t("mrow",null,[t("mtext",null,"    "),t("mn",null,"1110"),t("mtext",null," "),t("mn",null,"0000"),t("mtext",null," "),t("mn",null,"1000"),t("mtext",null," "),t("mn",null,"0011")])])])])]),t("annotation",{encoding:"application/x-tex"}," \\begin{array}{cc} & \\ \\ \\ \\ 0101 \\ 0000 \\ 0110 \\ 0101 \\\\ & \\underline{+ \\ 0110 \\ 1001 \\ 0101 \\ 0001} \\\\ & \\ \\ \\ \\ 1011 \\ 1001 \\ 1011 \\ 0110 \\\\ & \\underline{+ \\ 0110 \\ 0101 \\ 1100 \\ 0101} \\\\ & \\ \\ \\ \\ 0001 \\ 1111 \\ 0111 \\ 1011 \\\\ & \\text{回卷得到：} \\\\ & \\ \\ \\ \\ 0001 \\ 1111 \\ 0111 \\ 1100 \\\\ & \\text{取反得到：} \\\\ & \\ \\ \\ \\ 1110 \\ 0000 \\ 1000 \\ 0011 \\\\ \\end{array} ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"10.8em","vertical-align":"-5.15em"}}),t("span",{class:"mord"},[t("span",{class:"mtable"},[t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"col-align-c"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.65em"}},[t("span",{style:{top:"-7.65em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-6.45em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-5.25em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-4.05em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-2.85em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-1.65em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"-0.45em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"0.75em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})]),t("span",{style:{top:"1.95em"}},[t("span",{class:"pstrut",style:{height:"2.84em"}}),t("span",{class:"mord"})])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.15em"}},[t("span")])])])]),t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"arraycolsep",style:{width:"0.5em"}}),t("span",{class:"col-align-c"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.65em"}},[t("span",{style:{top:"-7.81em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")])]),t("span",{style:{top:"-6.61em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord underline"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.6444em"}},[t("span",{style:{top:"-2.7567em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"underline-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},"+"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.2833em"}},[t("span")])])])])])]),t("span",{style:{top:"-5.41em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110")])]),t("span",{style:{top:"-4.21em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord underline"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.6444em"}},[t("span",{style:{top:"-2.7567em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"underline-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},"+"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0101")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.2833em"}},[t("span")])])])])])]),t("span",{style:{top:"-3.01em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1011")])]),t("span",{style:{top:"-1.81em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord text"},[t("span",{class:"mord cjk_fallback"},"回卷得到：")])])]),t("span",{style:{top:"-0.61em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0001"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0111"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1100")])]),t("span",{style:{top:"0.59em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord text"},[t("span",{class:"mord cjk_fallback"},"取反得到：")])])]),t("span",{style:{top:"1.79em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1110"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"1000"),t("span",{class:"mspace"}," "),t("span",{class:"mord"},"0011")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"5.15em"}},[t("span")])])])]),t("span",{class:"arraycolsep",style:{width:"0.5em"}})])])])])])])],-1)),s[18]||(s[18]=a('<p>得到检验和为：<strong id="red-msg">1110 0000 1000 0011</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于伪首部中的字段</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">源 IP 地址</td><td style="text-align:center;">发送方的 IP 地址</td></tr><tr><td style="text-align:center;">目的 IP 地址</td><td style="text-align:center;">接收方的 IP 地址</td></tr><tr><td style="text-align:center;">全零</td><td style="text-align:center;">占 1 B，全 0 ，用于填充</td></tr><tr><td style="text-align:center;">协议</td><td style="text-align:center;">传输层协议（ UDP 为 17 ）</td></tr><tr><td style="text-align:center;">数据长度</td><td style="text-align:center;">UDP 数据报的长度（和首部中的 UDP 长度字段相同）</td></tr></tbody></table><p>对于为什么在过程中需要添加伪首部不需要详细讨论</p></div><h2 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议"><span>TCP 协议</span></a></h2><p>TCP 的传输单元称为 <strong>TCP 报文段 / TCP 段</strong> 因 TCP 协议可对应用层报文进行拆分传输而得名</p><p>TCP 传输过程中分为三个步骤，这三个步骤中传输的数据单元均为 TCP 段</p><ol><li><p>建立连接（三次握手）</p></li><li><p>数据传输</p></li><li><p>释放连接（四次挥手）</p></li></ol><figure><img src="//store.s1r0ko.top/svg/m/cn/24/3_ver_2.svg" alt="TCP 传输过程" tabindex="0" loading="lazy"><figcaption>TCP 传输过程</figcaption></figure><p>在上图中， 3 次握手对应发送三个 TCP 报文段</p><p>握手后建立 TCP 连接可以进行全双工通信</p><p>挥手 ① 和挥手 ② 表示进程 A 已经没有需要发送的数据了，两次挥手后单向断开连接</p><p>之后只有进程 B 可以向进程 A 发送数据，反之则不行</p><p>挥手 ③ 和挥手 ④ 表示进程 B 也没有需要发送的数据了，这两次挥手后关闭进程 B 到进程 A 的连接</p><p>最后结束通信</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>建立一次 TCP 连接可以传输多个应用层报文（可双向）</p></li><li><p>TCP 是面向字节流的（而 UDP 是面向报文的），无论传输多少应用层报文，在 TCP 看来就是一大串字节流即字节流是无边界的，一个 TCP 报文段可以包含多个应用层报文的分段</p></li><li><p>挥手结束 TCP 连接时可以由服务器发起第一次挥手也可以由客户端发起</p></li><li><p>TCP 报文段数据部分的大小受限于 MSS （Max Segment Size），MSS 是 TCP 连接双方协商的最大报文段数据部分大小（有效大小），MSS 的值在 TCP 连接建立时协商，并且 TCP 段<strong>不会强制要求</strong>数据部分大小一定要填充至 MSS 只需要保证不超过即可</p></li></ul></div><h3 id="tcp-数据报" tabindex="-1"><a class="header-anchor" href="#tcp-数据报"><span>TCP 数据报</span></a></h3><p>TCP 数据报有以下特点：</p><ul><li><p>TCP 首部更大，占 20 B ~ 60 B</p></li><li><p>TCP 支持报文自动拆分、重装，因此可以传输长报文</p></li><li><p>TCP 是有连接的、可靠的、支持拥塞控制</p></li><li><p>TCP 仅支持一对一传输（因为通信双方的传输层必须先建立连接）</p></li></ul><p>TCP 支持报文拆分和重装，所以可以进行长报文的传输</p><p><strong id="red-msg">对于 TCP 段的首部字段，不需要记住各字段的顺序和位置，只需要记住每个字段的含义即可</strong></p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/4_ver_3.svg" alt="TCP 数据段结构" tabindex="0" loading="lazy"><figcaption>TCP 数据段结构</figcaption></figure><div class="hint-container info"><p class="hint-container-title">TCP 数据段首部各字段及其含义（标红为重点）</p><table><thead><tr><th style="text-align:center;">字段名</th><th style="text-align:center;">bit 数</th><th style="text-align:center;">含义</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;"><strong id="red-msg">源端口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">发送进程的端口号</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong id="red-msg">目的端口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">接收进程的端口号</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong id="red-msg">序号</strong></td><td style="text-align:center;">32 bit</td><td style="text-align:center;">用于标记数据部分第一个字节在原始字节流中的位置</td><td style="text-align:center;">用于接收方重组应用层数据报，起始“序号”是由发送方自己设置的，<strong id="blue-msg">不一定从 0 开始</strong>，通常简写为 seq</td></tr><tr><td style="text-align:center;"><strong id="red-msg">确认号</strong></td><td style="text-align:center;">32 bit</td><td style="text-align:center;">用于反馈，表示序号在该确认号（某字节位）之前的所有字节都已正确接收</td><td style="text-align:center;">通常记为 ack 或 ack_seq</td></tr><tr><td style="text-align:center;">数据偏移</td><td style="text-align:center;">4 bit</td><td style="text-align:center;">数据偏移量，单位为 4 B，指出 TCP 数据段的首部长度</td><td style="text-align:center;">取值范围为 0 ~ 15</td></tr><tr><td style="text-align:center;">保留</td><td style="text-align:center;">6 bit</td><td style="text-align:center;">占 6 bit，全 0 ，目前暂时没有用</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">URG</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">紧急指针有效位，为 1 时表示该 TCP 数据段为紧急数据，应尽快推送</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;"><strong id="red-msg">ACK</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">确认号有效位，为 0 时， ack_seq 无效；为 1 时， ack_seq 有效</td><td style="text-align:center;">通常记为 ACK ，<strong id="blue-msg">除握手 ① 之外，其他所有 TCP 段的 ACK 都为 1</strong></td></tr><tr><td style="text-align:center;">PSH</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">推送位，为 1 时表示发送方希望接收方尽快回复（用于交互式通信）</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;">RST</td><td style="text-align:center;">1 bit</td><td style="text-align:center;">重置连接位，为 1 时表示出现严重差错（如主机崩溃），必须释放连接；同时也可以用于拒绝一个非法报文段（如黑客恶意共计）</td><td style="text-align:center;">当有一方接收到非法报文段时，会发送一个 RST 为 1 的报文段，示意双方尽快释放连接避免进一步的安全隐患；不常考</td></tr><tr><td style="text-align:center;"><strong id="red-msg">SYN</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">同步序号位，为 1 时表示这是一个请求连接或者接收连接的报文</td><td style="text-align:center;"><strong id="blue-msg">只有握手 ① 和握手 ② 的 SYN 值为 1 其他都为 0</strong></td></tr><tr><td style="text-align:center;"><strong id="red-msg">FIN</strong></td><td style="text-align:center;">1 bit</td><td style="text-align:center;">结束位，为 1 时表示发送方没有更多数据要发送了，数据已经发送完毕，要求释放连接</td><td style="text-align:center;"><strong id="blue-msg">只有挥手 ① 和挥手 ③ 的 FIN 值为 1 其他都为 0</strong></td></tr><tr><td style="text-align:center;"><strong id="red-msg">窗口</strong></td><td style="text-align:center;">16 bit</td><td style="text-align:center;">用于流量控制的关键，表示接收窗口的大小。即从本报文段首部中的 ack_seq 算起，接收方还能接收多少数据（以字节为单位），即接收方接收缓冲区的剩余空间大小</td><td style="text-align:center;">一般简写为 rwnd 或 rcvwnd</td></tr><tr><td style="text-align:center;">校验和</td><td style="text-align:center;">16 bit</td><td style="text-align:center;">用于校验 TCP 数据段首部和数据部分，和 UDP 校验和的计算雷同，也需要添加伪首部再进行计算，只是需要把协议字段的 17 改成 6 （TCP 协议号）、 UDP 长度字段改为 TCP 的长度</td><td style="text-align:center;">不常考</td></tr><tr><td style="text-align:center;">紧急指针</td><td style="text-align:center;">16 bit</td><td style="text-align:center;">紧急数据的专用序号，原理和上面的序号类似，所填的值为当前 TCP 数据段的紧急数据末尾字节的下一字节的偏移量，例如：数据部分长度为 8 字节，紧急数据长度为 4 字节，那么紧急指针就填写 4 （即 0 ~ 3 字节为紧急数据，紧急数据末尾字节的下一字节偏移量为 4 也就是第 4 字节开始都是普通数据，之前的都是紧急数据）</td><td style="text-align:center;"><strong id="blue-msg">TCP 数据段如同时含有普通数据和紧急数据，紧急数据必须位于普通数据之前</strong>，不常考</td></tr><tr><td style="text-align:center;">选项</td><td style="text-align:center;">不定长</td><td style="text-align:center;">建立 TCP 连接时，在握手 ① 和握手 ② 中在选项这里协商 MSS ，一般指发送该 TCP 段的来源方的 MSS ，向对方通知自己发送的数据的大小限制</td><td style="text-align:center;">一般就考 MSS 在这部分协商</td></tr><tr><td style="text-align:center;">填充</td><td style="text-align:center;">不定长</td><td style="text-align:center;">用于将 TCP 段首部填充至 4 B 的整数倍大小</td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>TCP 报文段首部没有专门的字段指明 TCP 段的长度为多少（会根据 IP 首部、 TCP 首部的信息算出来）</p></li><li><p>对于标志位为 1 的 TCP 段可以称为对应的标志名 + 段，例如： SYN = 1 时，对应 TCP 段可称为 SYN 段，对于含多个等于 1 的标志位的 TCP 段可以称所有的标志名 + 段，例如：一个 SYN = 1 且 ACK = 1 的 TCP 段可以称其为 SYN 段，也可以称其为 ACK 段</p></li><li><p>现实应用中通常 MSS 不会设置得太大，避免 IP 数据报分片</p></li></ul></div><h3 id="tcp-连接管理" tabindex="-1"><a class="header-anchor" href="#tcp-连接管理"><span>TCP 连接管理</span></a></h3><p>要点：建立连接，数据传输，释放连接过程中， TCP 报文段中 SYN 、 ACK 、 seq 、 ack 等关键字段的变化和区别，以及双方 TCP 状态的变化等</p>',23)),t("div",g,[s[10]||(s[10]=a('<p class="hint-container-title">建立连接</p><figure><img src="//store.s1r0ko.top/svg/m/cn/24/5_ver_2.svg" alt="TCP 建立连接字段变化" tabindex="0" loading="lazy"><figcaption>TCP 建立连接字段变化</figcaption></figure><p>握手 ③ 后进入 TCP 双工传输阶段，根据握手 ③ 是否携带数据，服务器发出的第一个 TCP 数据段字段也有所不同</p><p>这里假设携带 100 B 数据</p><table><thead><tr><th style="text-align:center;">第一个 TCP 数据段的字段</th><th style="text-align:center;">握手 ③ 携带数据</th><th style="text-align:center;">握手 ③ 不携带数据</th></tr></thead><tbody><tr><td style="text-align:center;">SYN</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">ACK</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">FIN</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">seq</td><td style="text-align:center;">51</td><td style="text-align:center;">51</td></tr><tr><td style="text-align:center;">ack</td><td style="text-align:center;">767</td><td style="text-align:center;">667</td></tr></tbody></table><ul><li><p>TCP 全过程中，只有握手 ① 和握手 ② 中 SYN 为 1 ，其他都为 0</p></li><li><p>握手 ① 和握手 ② 不能携带数据（只有 TCP 首部），但是仍要消耗一个序号</p></li><li><p>握手 ③ 可以携带数据，也可以不携带数据，如果不携带数据，就可以不消耗序号</p></li></ul><figure><img src="//store.s1r0ko.top/svg/m/cn/24/6_ver_1.svg" alt="TCP 建立连接状态变化" tabindex="0" loading="lazy"><figcaption>TCP 建立连接状态变化</figcaption></figure><p>思考收到某个报文时，双方的状态变化</p><ul><li>考试要点：</li></ul>',9)),t("p",null,[s[7]||(s[7]=e("从发出握手 ① 到客户端进程可以发送数据，至少要多久—— 1 ")),l(n,{to:"/art/learning/master/major/ComputerNetworks/PerformanceMetricsForComputerNetworks.html#%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4rtt"},{default:r(()=>s[6]||(s[6]=[e("RTT")])),_:1})]),t("p",null,[s[9]||(s[9]=e("从发出握手 ① 到服务器进程可以发送数据，至少要多久—— 1.5 ")),l(n,{to:"/art/learning/master/major/ComputerNetworks/PerformanceMetricsForComputerNetworks.html#%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4rtt"},{default:r(()=>s[8]||(s[8]=[e("RTT")])),_:1})])])])}const P=c(o,[["render",y]]),v=JSON.parse('{"path":"/art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.html","title":"传输层提供的服务","lang":"zh-CN","frontmatter":{"title":"传输层提供的服务","date":"2025-08-05T00:00:00.000Z","icon":"earth-americas","order":24,"category":["408","计算机网络","考研"],"description":"传输层概述 两台主机的两个应用通过 IP + 端口号（套接字） 实现通信 套接字分为： TCP 套接字和 UDP 套接字 注意 两台主机的端口号是相互独立的 TCP 、 UDP 的端口号也是相互独立的 当两个进程之间需要进行通信时，需要指明： 使用哪种传输层协议 本进程绑定的端口号 对方 IP 地址和端口号 熟知端口号 0~1023 为熟知端口号，开发...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传输层提供的服务\\",\\"image\\":[\\"//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/2_ver_2.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/3_ver_2.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/4_ver_3.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/5_ver_2.svg\\",\\"//store.s1r0ko.top/svg/m/cn/24/6_ver_1.svg\\"],\\"datePublished\\":\\"2025-08-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-06T12:05:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KurimulaAiri\\",\\"url\\":\\"https://github.com/KurimulaAiri\\"}]}"],["meta",{"property":"og:url","content":"https://md.s1r0ko.top/art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.html"}],["meta",{"property":"og:site_name","content":"博客与资料库"}],["meta",{"property":"og:title","content":"传输层提供的服务"}],["meta",{"property":"og:description","content":"传输层概述 两台主机的两个应用通过 IP + 端口号（套接字） 实现通信 套接字分为： TCP 套接字和 UDP 套接字 注意 两台主机的端口号是相互独立的 TCP 、 UDP 的端口号也是相互独立的 当两个进程之间需要进行通信时，需要指明： 使用哪种传输层协议 本进程绑定的端口号 对方 IP 地址和端口号 熟知端口号 0~1023 为熟知端口号，开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//store.s1r0ko.top/svg/m/cn/24/1_ver_1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T12:05:46.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-06T12:05:46.000Z"}]]},"git":{"createdTime":1754295547000,"updatedTime":1754481946000,"contributors":[{"name":"KurimulaAiri","username":"KurimulaAiri","email":"1095370199@qq.com","commits":5,"url":"https://github.com/KurimulaAiri"}]},"readingTime":{"minutes":12.29,"words":3688},"filePathRelative":"art/learning/master/major/ComputerNetworks/ServicesProvidedByTheTransportLayer.md","excerpt":"<h2>传输层概述</h2>\\n<p>两台主机的两个应用通过 <code>IP + 端口号</code>（套接字） 实现通信</p>\\n<p>套接字分为： TCP 套接字和 UDP 套接字</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<ul>\\n<li>\\n<p>两台主机的端口号是相互独立的</p>\\n</li>\\n<li>\\n<p>TCP 、 UDP 的端口号也是相互独立的</p>\\n</li>\\n<li>\\n<p>当两个进程之间需要进行通信时，需要指明：</p>\\n<ol>\\n<li>\\n<p>使用哪种传输层协议</p>\\n</li>\\n<li>\\n<p>本进程绑定的端口号</p>\\n</li>\\n<li>\\n<p>对方 IP 地址和端口号</p>\\n</li>\\n</ol>\\n</li>\\n</ul>\\n</div>","autoDesc":true}');export{P as comp,v as data};
